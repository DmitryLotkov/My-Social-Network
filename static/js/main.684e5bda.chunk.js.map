{"version":3,"sources":["Redux/AuthReducer.tsx","components/api.tsx","Images/defaultUserImage.jpg","components/Common/MyProfilePhoto/MyProfilePhoto.tsx","components/Header/TopContainer.tsx","components/Header/Header.tsx","components/Navbar/ChatBlock.tsx","components/Navbar/Navbar.tsx","Redux/ProfileReducer.tsx","Redux/Login-reducer.ts","Redux/DialogsReducer.tsx","Redux/NavBarReducer.tsx","Redux/UsersReducer.tsx","Redux/reduxStore.ts","components/Users/Users.tsx","components/Common/Preloader/Preloader.tsx","components/HOC/withAuthRedirect.tsx","components/Users/UsersContainerFC.tsx","components/Profile/ProfileStatus.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Common/TextAreaForm/TextAreaForm.tsx","components/Profile/MyPosts.tsx","components/Common/TextAreaForm/textAreaData.ts","components/Profile/ProfileFC.tsx","components/Profile/ProfileContainerFC.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogContainerFC.tsx","components/Events/Events.tsx","components/Events/EventsContainer.tsx","components/Photos/Photos.tsx","components/Photos/PhotosContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.scss","components/Navbar/Navbar.module.scss","components/Users/users.module.scss","components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.scss","components/Header/Header.module.scss","components/Navbar/ChatBlock.module.css","components/Profile/Profile.module.scss","components/Common/MyProfilePhoto/MyProfilePhoto.module.scss","components/Profile/MyPosts/Post/Post.module.scss","components/Profile/MyPosts.module.scss","components/Common/TextAreaForm/TextAreaForm.module.scss","components/Common/Preloader/Preloader.module.scss","components/Common/boxStyle.module.scss"],"names":["ACTIONS_TYPE","instance","axios","create","withCredentials","baseURL","headers","userAPI","currentPage","pageSize","get","profileAPI","userID","status","put","authAPI","post","delete","data","initialState","isAuth","isFetching","setUserAC","type","SET_USER_DATA","setIsAuthInAC","SET_AUTH","MyProfilePhoto","React","memo","myPhoto","useSelector","state","ProfilePage","photo","login","Auth","className","styles","myProfilePhotoWrapper","mySmallPhoto","src","defaultUserPhoto","alt","userName","TopContainer","navigate","useNavigate","dispatch","useDispatch","headerWrapper","loginBlock","onClick","then","res","resultCode","to","Header","s","headerTopLevel","ChatBlock","props","chatStyles","onlineFriendsWrapper","imgProfilePhoto","avatar","OnlineDot","NavBar","onlineFriends","SideBar","map","f","id","style","navWrapper","NavItem","color","isActive","Title","ACTIONS_TYPES","setUserProfileAC","profile","SET_SOME_USER_PROFILE","setStatusAC","SET_STATUS","postsData","v1","message","likesCount","fullName","lookingForAJob","lookingForAJobDescription","userId","undefined","aboutMe","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","photos","small","large","profileReducer","action","ADD_POST","dialogs","name","messages","dialogsReducer","text","sidebarReducer","followSuccess","unFollowSuccess","setUsersAC","users","setCurrentPageAC","setUsersTotalCountAC","serverTotalUsersCount","totalCount","toggleIsFetchingAC","toggleFollowingProgressAC","followingIsProgress","items","following","email","password","rememberMe","captcha","loginTC","LOGIN_USER","loginAC","rootReducer","combineReducers","DialogPage","UsersPage","u","followed","filter","Login","store","createStore","applyMiddleware","thunk","window","Users","pagesCount","Math","ceil","totalUserCount","userPhoto","usersWrapper","Pagination","onChange","event","page","onPageChanged","size","variant","shape","count","usersBlock","avatarAndFollowButton","disabled","followingInProgress","some","unfollowTC","followTC","nameAndStatus","Preloader","preloaderContainer","CircularProgress","WithAuthRedirect","Component","UserContainerFC","followingArr","Redirect","useEffect","response","getUsersTC","pageNumber","onPageChangedCTC","follow","unfollow","ProfileStatus","useState","editMode","setEditMode","localStatus","setLocalStatus","activateEditMode","deactivateEditMode","updateUserStatusTC","editableDiv","input","e","currentTarget","value","onKeyPress","key","onBlur","autoFocus","ProfileInfo","wrapper","descriptionBlock","statusBlock","profileName","profileStatus","Post","setLikesCount","round","random","itemWrapper","userAndLoginBlock","likeCount","TextAreaForm","formik","useFormik","initialValues","onSubmit","values","resetForm","callBack","formWrapper","handleSubmit","textArea","maxLength","placeholder","placeholderText","getFieldProps","MyPosts","postsElements","p","postBlock","posts","ProfileFC","commonStyle","mainBox","ProfileContainerFC","params","useParams","Number","getProfileThunkCreator","catch","console","log","getUserStatusTC","DialogItem","dialogItem","m","dialogItemWrapper","userAvatarAndName","Message","messagesWrapper","Dialogs","messagesElements","addMessage","useCallback","addMessageAC","dialogsWrapper","DialogContainerFC","dialogPage","Events","EventsContainer","Photos","PhotosContainer","content","validate","href","errors","checked","App","getState","err","path","element","UsersContainerFC","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.684e5bda.chunk.js","sourcesContent":["import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../components/api\";\r\n\r\nexport const myUserID = 21748;\r\n//types\r\nexport enum ACTIONS_TYPE {\r\n    SET_USER_DATA = \"SET-USER_DATA\",\r\n    SET_AUTH = \"SET-AUTH\",\r\n}\r\nexport type checkAuthType = \"idle\" | \"logged\" | \"unLogged\"\r\ntype AuthReducerType = ReturnType<typeof setUserAC>| ReturnType<typeof setIsAuthInAC>\r\nexport type AuthDataType = {\r\n    id: null | number\r\n    email: null | string\r\n    login: null | string\r\n}\r\n\r\ntype InitialStateType = {\r\n    data: AuthDataType\r\n    isAuth: checkAuthType\r\n    isFetching: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    data: {} as AuthDataType,\r\n    isAuth: \"idle\",\r\n    isFetching: true,\r\n\r\n}\r\n//thunks\r\nexport const authTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.getAuth()\r\n            .then((response) => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setUserAC(response.data.data));\r\n                    dispatch(setIsAuthInAC(\"logged\"))\r\n                    return response.data.data.id; //тут мы достаем свой ID из объекта при аутенфикации в соц. сети\r\n                }\r\n            })\r\n            .catch((err) =>{\r\n                dispatch(setIsAuthInAC(\"unLogged\"))\r\n                console.log(err)\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const logOutTC = () =>{\r\n    return (dispatch: Dispatch) =>{\r\n        authAPI.logout().then( res =>{\r\n            if(res.data.resultCode === 0){\r\n                dispatch( dispatch(setIsAuthInAC(\"unLogged\")))\r\n            }\r\n        })\r\n\r\n    }\r\n}\r\nexport const authReducer = (state = initialState, action: AuthReducerType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.SET_USER_DATA: {\r\n\r\n            return {\r\n                ...state,\r\n                data: action.data,\r\n                isAuth: \"logged\",\r\n                isFetching: false,\r\n            }\r\n        }\r\n        case ACTIONS_TYPE.SET_AUTH:{\r\n            return {\r\n                ...state, isAuth:action.isAuth\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const setUserAC = (data: AuthDataType) => {\r\n\r\n    return {\r\n        type: ACTIONS_TYPE.SET_USER_DATA,\r\n        data: data,\r\n    } as const\r\n}\r\nexport const setIsAuthInAC = (isAuth: checkAuthType) =>{\r\n    return {\r\n        type: ACTIONS_TYPE.SET_AUTH,\r\n        isAuth\r\n    } as const\r\n}\r\n\r\n\r\n","import axios, {AxiosResponse} from \"axios\";\r\n\r\nimport {UsersType} from \"../Redux/UsersReducer\";\r\nimport {ProfileDataType} from \"../Redux/ProfileReducer\";\r\nimport {AuthDataType} from \"../Redux/AuthReducer\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"3ca3376c-f1c7-42b6-b439-a7f59c674e78\",\r\n    }\r\n})\r\nexport type LoginParamsType = {\r\n    email: string | undefined\r\n    password: string | undefined\r\n    rememberMe: boolean | undefined\r\n    captcha?: string | undefined\r\n}\r\ntype RespType<T = {}> = {\r\n    resultCode: 0\r\n    data: T\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n}\r\nexport const userAPI = {\r\n\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<UsersType>(`users?page=${currentPage}&count=${pageSize}`);\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userID: number | undefined) {\r\n        return instance.get<ProfileDataType>(`profile/ ${userID}`);\r\n    },\r\n    getStatus(userID: number | undefined) {\r\n\r\n        return instance.get<AxiosResponse<string>, any>(`profile/status/${userID}`);\r\n    },\r\n    updateStatus(status: string | null) {\r\n        return instance.put<AxiosResponse<RespType>,any>(`profile/status`, {status: status})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    getAuth() {\r\n        return instance.get<RespType<AuthDataType>>(`auth/me`);\r\n    },\r\n    follow(userID: string | undefined) {\r\n        return instance.post<RespType<AuthDataType>>(`follow/${userID}`);\r\n    },\r\n    unfollow(userID: string | undefined) {\r\n        return instance.delete<RespType<AuthDataType>>(`follow/${userID}`);\r\n    },\r\n    login(data: LoginParamsType){\r\n        return instance.post<RespType<{userId?:number}>>(`auth/login`, data)\r\n    },\r\n    logout(){\r\n\r\n        return instance.delete<RespType<{userId: number}>>('/auth/login')\r\n    }\r\n\r\n}\r\n","export default __webpack_public_path__ + \"static/media/defaultUserImage.ed37b80a.jpg\";","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../../Redux/reduxStore\";\r\nimport styles from \"./MyProfilePhoto.module.scss\";\r\nimport defaultUserPhoto from \"../../../Images/defaultUserImage.jpg\";\r\n\r\nexport const MyProfilePhoto = React.memo(() =>{\r\n    const myPhoto = useSelector<AppRootState, string | undefined>(state => state.ProfilePage.photo);\r\n    const login = useSelector<AppRootState, string | null>(state => state.Auth.data.login);\r\n    return (\r\n        <div className={styles.myProfilePhotoWrapper}>\r\n            <img className={styles.mySmallPhoto} src={myPhoto || defaultUserPhoto} alt={\"userPhoto\"}/>\r\n            <div className={styles.userName}>\r\n                {login}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport styles from \"./Header.module.scss\"\r\nimport {NavLink, useNavigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../Redux/reduxStore\";\r\nimport {checkAuthType, logOutTC} from \"../../Redux/AuthReducer\";\r\nimport {MyProfilePhoto} from \"../Common/MyProfilePhoto/MyProfilePhoto\";\r\n\r\n\r\nexport function TopContainer() {\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppRootState, checkAuthType>(state => state.Auth.isAuth);\r\n\r\n    const logOutHandler = () =>{\r\n        dispatch(logOutTC());\r\n    }\r\n    const redirectToMyProfile = () => {\r\n        navigate(\"/profile/21748\");\r\n    }\r\n    return (\r\n        <div className={styles.headerWrapper}>\r\n\r\n            <img src={\"https://templates.envytheme.com/zust/default/assets/images/logo.png\"} alt=\"logo\"/>\r\n\r\n\r\n            {isAuth ===\"logged\" ?\r\n                <div className={styles.loginBlock} onClick={redirectToMyProfile}>\r\n                    <MyProfilePhoto/>\r\n                    <div className={styles.login} onClick={logOutHandler}>\r\n                        Log out\r\n                    </div>\r\n                </div> :\r\n\r\n                <NavLink className={styles.login} to={\"/login\"}>\r\n                    Log in\r\n                </NavLink>\r\n\r\n\r\n            }\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport s from \"./Header.module.scss\"\r\nimport {TopContainer} from \"./TopContainer\";\r\n\r\n\r\n\r\nexport function Header(){\r\n    return(\r\n            <header className={s.headerTopLevel}>\r\n                <TopContainer/>\r\n            </header>\r\n\r\n    )\r\n}","import {OnlineFriendType} from \"../OldComponents/OldStore\";\r\nimport React from \"react\";\r\nimport chatStyles from \"./ChatBlock.module.css\"\r\n\r\nexport function ChatBlock(props: OnlineFriendType) {\r\n\r\n    return (\r\n            <div className={chatStyles.onlineFriendsWrapper}>\r\n                <img className={chatStyles.imgProfilePhoto} src={props.avatar} alt={\"onlineFriendAvatar\"}/>\r\n                <span className={chatStyles.OnlineDot}/>\r\n            </div>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport style from \"./Navbar.module.scss\"\r\nimport chatStyles from \"./ChatBlock.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {SideBarType} from \"../OldComponents/OldStore\";\r\nimport {ChatBlock} from \"./ChatBlock\";\r\n\r\ntype NavBarPropsType = {\r\n    SideBar: SideBarType,\r\n}\r\n\r\nexport function NavBar(props: NavBarPropsType) {\r\n\r\n    let onlineFriends = props.SideBar.onlineFriends.map((f) =>\r\n        <NavLink key={f.id} to={\"/friends\" + f.id}>\r\n            <ChatBlock\r\n                       id={f.id}\r\n                       avatar={f.avatar}/>\r\n        </NavLink>)\r\n    return (\r\n        <nav className={style.navWrapper}>\r\n            <div className={style.NavItem}>\r\n                <NavLink  to={\"/profile\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })} >Profile</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/dialogs\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Messages</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/events\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Events</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/photos\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Photos</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/users\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Find Friends</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/settings\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Settings</NavLink>\r\n            </div>\r\n\r\n            <div className={chatStyles.ChatBlock}>\r\n                <span className={chatStyles.Title}>Chat online</span>\r\n                {onlineFriends}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n","import {v1} from \"uuid\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI} from \"../components/api\";\r\nimport {ActionsTypes} from \"./ActionsTypes\";\r\n\r\n\r\nexport enum ACTIONS_TYPE {\r\n    SET_PROFILE = \"SET-PROFILE\",\r\n    ADD_POST = \"ADD-POST\",\r\n    SET_MY_PROFILE_PHOTO = \"SET-MY-PROFILE_PHOTO\",\r\n    UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\",\r\n    SET_SOME_USER_PROFILE = \"SET-SOME-USER-PROFILE\",\r\n    SET_STATUS = \"SET-STATUS\"\r\n}\r\nexport type PostTextType = {\r\n    text: string\r\n}\r\ntype ProfilePageType = {\r\n    postsData: Array<PostType>\r\n    profile: ProfileDataType\r\n    photo: string | undefined\r\n    status: string\r\n}\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type userProfileContactType = {\r\n    facebook: string | undefined\r\n    website: string | null\r\n    vk: string | undefined\r\n    twitter: string | undefined\r\n    instagram: string | undefined\r\n    youtube: string | undefined\r\n    github: string | null | undefined\r\n    mainLink: string | null\r\n}\r\nexport type userProfilePhotosType = {\r\n    small: string | undefined\r\n    large: string | undefined\r\n}\r\nexport type ProfileDataType = {\r\n    aboutMe: string | null\r\n    contacts: userProfileContactType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string | null\r\n    userId: number | undefined\r\n    photos: userProfilePhotosType\r\n\r\n}\r\nexport const getProfileThunkCreator = (userId: number | undefined) => {\r\n    return (dispatch: Dispatch) => {\r\n\r\n        profileAPI.getProfile(userId)\r\n            .then(response => {\r\n                dispatch(setUserProfileAC(response.data));\r\n            })\r\n    }\r\n}\r\nexport const getUserStatusTC = (userId: number | undefined) => {\r\n    return  (dispatch: Dispatch) => {\r\n\r\n        profileAPI.getStatus(userId)\r\n\r\n            .then(res =>{\r\n                if(res.status === 200){\r\n                    dispatch(setStatusAC(res.data));\r\n                }\r\n            }).catch(()=>{\r\n            console.log(\"Error in getStatus\")\r\n        });\r\n\r\n    }\r\n}\r\n\r\nexport const updateUserStatusTC = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n\r\n        profileAPI.updateStatus(status)\r\n            .then(res => {\r\n                if(res.data.resultCode === 0){\r\n                    dispatch(setStatusAC(status))\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const addPostActionAC = (data: string) => {\r\n    return {\r\n        type: ACTIONS_TYPE.ADD_POST,\r\n        data\r\n    } as const\r\n}\r\nexport const updateNewPostTextAC = (text: PostTextType) => {\r\n\r\n    return {\r\n        type: ACTIONS_TYPE.UPDATE_NEW_POST_TEXT,\r\n        text\r\n    } as const\r\n}\r\nexport const setUserProfileAC = (profile: ProfileDataType) => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_SOME_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\nexport const setMyProfilePhotoAC = (photo: string | undefined) => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_MY_PROFILE_PHOTO,\r\n        photo\r\n    } as const\r\n}\r\nexport const setStatusAC = (status: string) => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_STATUS,\r\n        status\r\n    } as const\r\n\r\n}\r\nconst initialState: ProfilePageType = {\r\n\r\n    postsData: [\r\n        {id: v1(), message: \"Do you have a job for me? What if I find it?\", likesCount: 0},\r\n        {id: v1(), message: \"I want to be a serious frontend developer.\", likesCount: 0},\r\n        {id: v1(), message: \"What is the good weather today,isn't it?\", likesCount: 0},\r\n    ],\r\n    status: \"\",\r\n    photo: \"\",\r\n    profile: {\r\n        fullName: \"\",\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: \"\",\r\n        userId: undefined,\r\n        aboutMe: \"\",\r\n        contacts: {\r\n            facebook: \"\",\r\n            github: \"\",\r\n            instagram: \"\",\r\n            mainLink: \"\",\r\n            twitter: \"\",\r\n            vk: \"\",\r\n            website: \"\",\r\n            youtube: \"\",\r\n        },\r\n        photos:\r\n            {\r\n                small: \"\",\r\n                large: \"\",\r\n            }\r\n    }\r\n}\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.ADD_POST: {\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, {id: v1(), message: action.data, likesCount: 0}]\r\n            };\r\n        }\r\n        // case \"UPDATE-NEW-POST-TEXT\": {\r\n        //     return {\r\n        //         ...state,\r\n        //         postText: action.text\r\n        //     };\r\n        // }\r\n        case \"SET-SOME-USER-PROFILE\": {\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        }\r\n        case \"SET-MY-PROFILE_PHOTO\": {\r\n            return {\r\n                ...state, photo: action.photo\r\n            }\r\n        }\r\n        case \"SET-STATUS\": {\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default profileReducer","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../components/api\";\r\nimport {ActionsTypes} from \"./ActionsTypes\";\r\nimport {setIsAuthInAC} from \"./AuthReducer\";\r\n\r\ntype InitialStateType =  {\r\n    data: LoginParamsType\r\n\r\n}\r\n\r\nexport enum ACTIONS_TYPES {\r\n    LOGIN_USER = \"LOGIN-USER\",\r\n}\r\n\r\nconst initialState:InitialStateType  = {\r\n    data: {\r\n        email: \"\",\r\n        password: \"\",\r\n        rememberMe: false,\r\n        captcha: \"\",\r\n    },\r\n}\r\n\r\nexport const loginReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPES.LOGIN_USER:\r\n            return {...state,\r\n                data: action.data\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const loginAC = (data: LoginParamsType) => {\r\n    return {\r\n        type: ACTIONS_TYPES.LOGIN_USER,\r\n        data,\r\n    } as const\r\n}\r\n\r\n\r\nexport const loginTC = (data: LoginParamsType) => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.login(data).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(loginAC(data));\r\n                dispatch(setIsAuthInAC(\"logged\"))\r\n            }\r\n        })\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport {ActionsTypes} from \"./ActionsTypes\";\r\n\r\nexport const addMessageAC = (text: string) => {\r\n    return {\r\n        type: \"ADD-DIALOG-MESSAGE\",\r\n        text\r\n    } as const\r\n}\r\n\r\nexport type MessagesType = {\r\n    id: string\r\n    message: string\r\n}\r\nexport type DialogsType = {\r\n    id: string\r\n    name: string\r\n    avatar: string\r\n    message: string\r\n}\r\nexport type DialogsStateType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\nlet initialState: DialogsStateType = {\r\n\r\n    dialogs: [\r\n        {\r\n            id: v1(),\r\n            name: \"Boris Jonson\",\r\n            avatar: \"https://themified.com/friend-finder/images/users/user-4.jpg\",\r\n            message: \"What is the weather forecast for tomorrow?\"\r\n        },\r\n\r\n    ],\r\n    messages: [\r\n        {id: v1(), message: \"Looks like it will be sunny tomorrow=)\"}\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsStateType = initialState, action: ActionsTypes): DialogsStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-DIALOG-MESSAGE\": {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: v1(), message: action.text}]\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\nexport default dialogsReducer;","import {SideBarType} from \"../components/OldComponents/OldStore\";\r\nimport {v1} from \"uuid\";\r\n\r\nlet initialState: SideBarType = {\r\n    onlineFriends: [\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-4.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-3.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-6.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-2.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-7.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-10.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-9.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-5.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-8.jpg\"},\r\n    ],\r\n}\r\nconst sidebarReducer = (state: SideBarType = initialState) => {\r\n    return state\r\n}\r\nexport default sidebarReducer;","import {authAPI, userAPI} from \"../components/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionsTypes} from \"./ActionsTypes\";\r\n\r\n\r\nexport const getUsersTC = (currentPage: number, pageSize: number) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        userAPI.getUsers(currentPage, pageSize)\r\n            .then(response => {\r\n                dispatch(toggleIsFetchingAC(false));\r\n                dispatch(setUsersAC(response.data.items));\r\n                dispatch(setUsersTotalCountAC(response.data.totalCount));\r\n            });\r\n    }\r\n}\r\nexport const onPageChangedCTC = (pageSize: number, pageNumber: number) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        dispatch(setCurrentPageAC(pageNumber));\r\n        userAPI.getUsers(pageNumber, pageSize)\r\n            .then(response => {\r\n                    dispatch(setUsersAC(response.data.items));\r\n                    dispatch(setUsersTotalCountAC(response.data.totalCount));\r\n                    dispatch(toggleIsFetchingAC(false));\r\n                }\r\n            )\r\n    }\r\n\r\n}\r\n\r\nexport const follow = (userID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgressAC(true, userID));\r\n        authAPI.follow(userID)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followSuccess(userID));\r\n                }\r\n                dispatch(toggleFollowingProgressAC(false, userID));\r\n            })\r\n    }\r\n}\r\n\r\nexport const unfollow = (userID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgressAC(true, userID));\r\n        authAPI.unfollow(userID)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n\r\n                    dispatch(unFollowSuccess(userID));\r\n                }\r\n                dispatch(toggleFollowingProgressAC(false, userID));\r\n            })\r\n    }\r\n}\r\nexport type LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type UserType = {\r\n    id: string,\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n    followed: boolean\r\n    photos: PhotosType\r\n\r\n}\r\nexport type UsersType = {\r\n    items: UserType[]\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    following: Array<string>\r\n}\r\n\r\nexport const followSuccess = (userID: string) => {\r\n    return {\r\n        type: \"FOLLOW\",\r\n        userID: userID,\r\n    } as const\r\n}\r\nexport const unFollowSuccess = (userID: string) => {\r\n    return {\r\n        type: \"UNFOLLOW\",\r\n        userID: userID,\r\n    } as const\r\n}\r\nexport const setUsersAC = (users: UserType[]) => {\r\n    return {\r\n        type: \"SET-USERS\",\r\n        users: users,\r\n    } as const\r\n}\r\nexport const setCurrentPageAC = (currentPage: number) => {\r\n    return {\r\n        type: \"SET-CURRENT-PAGE\",\r\n        currentPage: currentPage,\r\n    } as const\r\n}\r\nexport const setUsersTotalCountAC = (serverTotalUsersCount: number) => {\r\n    return {\r\n        type: \"SET-TOTAL-USERS-COUNT\",\r\n        totalCount: serverTotalUsersCount\r\n    } as const\r\n}\r\nexport const toggleIsFetchingAC = (isFetching: boolean) => {\r\n    return {\r\n        type: \"IS-FETCHING\",\r\n        isFetching: isFetching,\r\n    } as const\r\n}\r\n\r\nexport const toggleFollowingProgressAC = (followingIsProgress: boolean, userID: string) => {\r\n    return {\r\n        type: \"IS-FOLLOWING-PROGRESS\",\r\n        followingIsProgress: followingIsProgress,\r\n        userID: userID,\r\n    } as const\r\n}\r\n\r\nlet initialState: UsersType = {\r\n    items: [],\r\n    pageSize: 7,\r\n    totalCount: 1,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    following: [],\r\n}\r\nexport const userReducer = (state = initialState, action: ActionsTypes): UsersType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\": {\r\n            return {...state, items: state.items.map(u => u.id === action.userID ? {...u, followed: true} : u)}\r\n        }\r\n\r\n        case \"UNFOLLOW\": {\r\n            return {...state, items: state.items.map(u => u.id === action.userID ? {...u, followed: false} : u)}\r\n        }\r\n\r\n        case \"SET-USERS\": {\r\n            return {...state, items: action.users}\r\n        }\r\n\r\n        case \"SET-CURRENT-PAGE\": {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n\r\n        case \"SET-TOTAL-USERS-COUNT\": {\r\n            return {...state, totalCount: action.totalCount}\r\n        }\r\n\r\n        case \"IS-FETCHING\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        case \"IS-FOLLOWING-PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                following: action.followingIsProgress\r\n                    ? [...state.following, action.userID]\r\n                    : state.following.filter(id => id !== action.userID)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./ProfileReducer\";\r\nimport dialogsReducer from \"./DialogsReducer\";\r\nimport sidebarReducer from \"./NavBarReducer\";\r\nimport {userReducer} from \"./UsersReducer\";\r\nimport {authReducer} from \"./AuthReducer\";\r\nimport thunk from 'redux-thunk'\r\nimport {loginReducer} from \"./Login-reducer\";\r\n\r\n\r\nexport type AppRootState = ReturnType <typeof rootReducer>\r\nconst rootReducer = combineReducers({\r\n    ProfilePage: profileReducer,\r\n    DialogPage: dialogsReducer,\r\n    SideBar: sidebarReducer,\r\n    UsersPage: userReducer,\r\n    Auth: authReducer,\r\n    Login: loginReducer,\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent} from \"react\";\r\nimport style from \"./users.module.scss\";\r\nimport userPhoto from \"../../Images/defaultUserImage.jpg\";\r\nimport {UserType} from \"../../Redux/UsersReducer\";\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\n\r\ntype UsersPresentationComponentType = {\r\n    totalUserCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: UserType[]\r\n    followingInProgress: Array<string>\r\n    followTC: (userID: string) => void\r\n    unfollowTC: (userID: string) => void\r\n}\r\n\r\nexport function Users(props: UsersPresentationComponentType) {\r\n\r\n    const pagesCount = Math.ceil(props.totalUserCount / props.pageSize);\r\n    const defaultUserPhoto: string = userPhoto;\r\n    const onPageHandler = (event: ChangeEvent<unknown>, page: number) => {\r\n        props.onPageChanged(page);\r\n    }\r\n    const navigate = useNavigate();\r\n\r\n    return <div className={style.usersWrapper}>\r\n        <Pagination color={\"primary\"}\r\n                    onChange={onPageHandler}\r\n                    size={\"small\"}\r\n                    variant={\"outlined\"}\r\n                    shape=\"rounded\"\r\n                    count={pagesCount}\r\n                    page={props.currentPage}\r\n        />\r\n        {props.users.map(u =>\r\n\r\n            <div key={u.id}>\r\n                <div className={style.usersBlock}>\r\n                    <div className={style.avatarAndFollowButton}>\r\n                        <img onClick={() => navigate(`/profile/${u.id}`)}\r\n                             className={style.avatar} src={u.photos.small ? u.photos.small : defaultUserPhoto}\r\n                             alt={\"user\"}/>\r\n                        <span>\r\n                            {u.followed ?\r\n                                <button disabled={props.followingInProgress\r\n                                    .some(id => id === u.id)}\r\n                                        onClick={() => {\r\n                                            //ниже вызывается thunk creator из пропсов, в userContainerFC unfollowTC оборачивается dispatch\r\n                                            props.unfollowTC(u.id)\r\n                                        }\r\n                                        }>Unfollow</button>\r\n\r\n                                : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                          onClick={\r\n                                              () => {\r\n                                                  //ниже вызывается thunk creator из пропсов, в userContainerFC unfollowTC оборачивается dispatch\r\n                                                  //thunk creator нужен для связи DAL и BLL минуя UI\r\n                                                  props.followTC(u.id)\r\n                                              }\r\n                                          }>Follow</button>\r\n                            }\r\n                            </span>\r\n                    </div>\r\n                    <div className={style.nameAndStatus}>\r\n                        <h3 className={style.name}>\r\n                            <div>{u.name}</div>\r\n                        </h3>\r\n                        <div className={style.status}>{`Status:  ${u.status ?? \"no status\"}`}</div>\r\n\r\n                        {/*<div className={style.location}>\r\n                            <div className={style.country}>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </div>*/}\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>)}\r\n    </div>\r\n\r\n}\r\n\r\n","import React from \"react\"\r\nimport styles from \"./Preloader.module.scss\"\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\nexport function Preloader (){\r\n    return (\r\n        <div className={styles.preloaderContainer}>\r\n            <CircularProgress />\r\n        </div>)\r\n}","import React from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../Redux/reduxStore\";\r\nimport {checkAuthType} from \"../../Redux/AuthReducer\";\r\n\r\n\r\nexport const WithAuthRedirect = (Component: React.ComponentType<any>) => {\r\n\r\n    const isAuth = useSelector<AppRootState, checkAuthType>(state => state.Auth.isAuth);\r\n\r\n    return (props:any) => {\r\n        if (isAuth === \"unLogged\") {\r\n            return <Navigate to={\"/login\"}/>\r\n        }\r\n        return <Component {...props}/>\r\n\r\n    };\r\n};\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../Redux/reduxStore\";\r\nimport {\r\n    follow, getUsersTC, onPageChangedCTC,\r\n    UserType, unfollow\r\n} from \"../../Redux/UsersReducer\";\r\nimport React, {FC, useEffect} from \"react\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../Common/Preloader/Preloader\";\r\nimport {WithAuthRedirect} from \"../HOC/withAuthRedirect\";\r\n\r\n\r\nconst UserContainerFC: FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const users = useSelector<AppRootState, UserType[]>((state) => state.UsersPage.items);\r\n    const isFetching = useSelector<AppRootState, boolean>(state => state.UsersPage.isFetching);\r\n    const pageSize = useSelector<AppRootState, number>(state => state.UsersPage.pageSize);\r\n    const currentPage = useSelector<AppRootState, number>(state => state.UsersPage.currentPage);\r\n    const totalUserCount = useSelector<AppRootState, number>(state => state.UsersPage.totalCount);\r\n    const followingArr = useSelector<AppRootState, Array<string>>(state => state.UsersPage.following);\r\n    let Redirect= WithAuthRedirect(Users);\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersTC(currentPage, pageSize));\r\n    }, [currentPage, pageSize, dispatch])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(onPageChangedCTC(pageSize, pageNumber));\r\n    }\r\n    const unfollowTC = (userID: string) => {\r\n\r\n        dispatch(unfollow(userID))\r\n    }\r\n    const followTC = (userID: string) => {\r\n\r\n        dispatch(follow(userID))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isFetching ?\r\n                    <Preloader/> :\r\n                    <Redirect onPageChanged={onPageChanged}\r\n                                            currentPage={currentPage}\r\n                                            totalUserCount={totalUserCount}\r\n                                            pageSize={pageSize}\r\n                                            users={users}\r\n                                            followTC={followTC}\r\n                                            unfollowTC={unfollowTC}\r\n                                            followingInProgress={followingArr}/>\r\n            }\r\n        </>\r\n    )\r\n}\r\nexport default UserContainerFC\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport styles from \"./Profile.module.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../Redux/reduxStore\";\r\nimport {updateUserStatusTC} from \"../../Redux/ProfileReducer\";\r\n\r\n\r\nexport const ProfileStatus = React.memo(() => {\r\n    const dispatch = useDispatch();\r\n    const [editMode, setEditMode] = useState<boolean>(true);\r\n    const status = useSelector<AppRootState, string>(state => state.ProfilePage.status);\r\n    const userId = useSelector<AppRootState, number | undefined>(state => state.ProfilePage.profile.userId); //21748\r\n    const [localStatus, setLocalStatus] = useState(status);\r\n\r\n    const activateEditMode = () => {\r\n        setLocalStatus(status);\r\n        setEditMode(false);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        dispatch(updateUserStatusTC(localStatus));\r\n        setEditMode(true);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value);\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            deactivateEditMode();\r\n        }\r\n    }\r\n    if (editMode && userId !== 21748 ) {\r\n        return (\r\n            <div>\r\n                {status}\r\n            </div>\r\n        )\r\n    }\r\n    if(editMode && userId === 21748 && !status){\r\n\r\n        return <div className={styles.editableDiv}\r\n            onClick={activateEditMode}>\r\n            {\"Set status\"}\r\n        </div>\r\n    }\r\n    if(editMode && userId === 21748){\r\n        return <div className={styles.editableDiv}\r\n                    onClick={activateEditMode}>\r\n            {status}\r\n        </div>\r\n    }\r\n\r\n    else return <input className={styles.input}\r\n                       onChange={changeTitle}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       onBlur={deactivateEditMode}\r\n                       type=\"text\"\r\n                       autoFocus={true}\r\n                       value={localStatus}/>\r\n\r\n\r\n});\r\n\r\n","import React from \"react\";\r\nimport styles from \"./ProfileInfo.module.scss\"\r\nimport {\r\n    ProfileDataType,\r\n} from \"../../../../Redux/ProfileReducer\";\r\nimport defaultUserPhoto from \"./../../../../Images/defaultUserImage.jpg\";\r\nimport {ProfileStatus} from \"../../ProfileStatus\";\r\n\r\ntype profileInfoPropsType = {\r\n    profile: ProfileDataType\r\n\r\n}\r\n\r\nexport const ProfileInfo = React.memo((props: profileInfoPropsType)=> {\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.descriptionBlock}>\r\n                <img src={props.profile?.photos.large ?? defaultUserPhoto} alt={\"userPhoto\"}/>\r\n            </div>\r\n            <div className={styles.statusBlock}>\r\n                <div className={styles.profileName}>{props.profile.fullName}</div>\r\n                <div className={styles.profileStatus}>\r\n                    <ProfileStatus/>\r\n                </div>\r\n                <div className={styles.lookingForAJobDescription}>\r\n                    Looking for a job status: { props.profile.lookingForAJobDescription}\r\n                </div>\r\n                <div className={styles.contacts}>\r\n                    <span>contacts: </span>\r\n                    <div>facebook: {props.profile.contacts.facebook}</div>\r\n                    <div>instagram: {props.profile.contacts.instagram}</div>\r\n                    <div>YouTube: {props.profile.contacts.youtube}</div>\r\n                    <div>Vk: {props.profile.contacts.vk}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})","import React, {useEffect, useState} from \"react\";\r\nimport styles from \"./Post.module.scss\"\r\nimport {MyProfilePhoto} from \"../../../Common/MyProfilePhoto/MyProfilePhoto\";\r\n\r\ntype MyPostsPropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nexport function Post(props: MyPostsPropsType) {\r\n    const [likesCount, setLikesCount] = useState<number>();\r\n    const maxLikesCount = 1000;\r\n    const generateLike = () => {\r\n        setLikesCount(Math.round(Math.random() * maxLikesCount));\r\n    };\r\n    useEffect(() => {\r\n        generateLike()\r\n    }, []);\r\n\r\n    return (\r\n        <div className={styles.itemWrapper}>\r\n            <div className={styles.userAndLoginBlock}>\r\n                <MyProfilePhoto/>\r\n            </div>\r\n            <div>\r\n                {props.message}\r\n            </div>\r\n            <div>\r\n                <span>Like: </span>{props.likeCount !== 0 ? props.likeCount : likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport styles from \"./TextAreaForm.module.scss\";\r\nimport {MyPostsPropsType} from \"../../Profile/MyPosts\";\r\n\r\nexport const TextAreaForm = React.memo((props: MyPostsPropsType) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            text: \"\",\r\n        },\r\n        onSubmit: (values, {resetForm}) => {\r\n            if (values.text !== \"\")\r\n                props.callBack(values.text)\r\n            resetForm();\r\n        },\r\n\r\n    })\r\n\r\n    return (\r\n        <form className={styles.formWrapper} onSubmit={formik.handleSubmit}>\r\n                <textarea  className={styles.textArea} maxLength={1000}\r\n                          placeholder={props.placeholderText}\r\n                          {...formik.getFieldProps(\"text\")}\r\n                          autoFocus={true}\r\n                />\r\n            <div>\r\n                <button type={\"submit\"}>Publish</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n})","import React from \"react\";\r\nimport {Post} from \"./MyPosts/Post/Post\";\r\nimport styles from \"./MyPosts.module.scss\"\r\nimport {PostType} from \"../OldComponents/OldStore\";\r\nimport { TextAreaForm } from \"../Common/TextAreaForm/TextAreaForm\";\r\n\r\nexport type MyPostsPropsType = {\r\n    postsData?: Array<PostType>\r\n    callBack: (text: string) => void\r\n    placeholderText: string\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    let postsElements = props.postsData?.map(p => <Post key={p.id}\r\n                                                        message={p.message}\r\n                                                        likeCount={p.likesCount}/>)\r\n    return <div className={styles.postBlock}>\r\n        <h3>My posts</h3>\r\n        <TextAreaForm placeholderText={props.placeholderText} callBack={props.callBack}/>\r\n        <div className={styles.posts}>\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n\r\n})\r\n\r\n","export const placeholderText = {\r\n    profileAreaText: \"What's new with you?\",\r\n    dialogsAreaText: \"Type a message\"\r\n}","import React from \"react\";\r\nimport styles from \"./Profile.module.scss\"\r\nimport {ProfileInfo} from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport {addPostActionAC, PostType, ProfileDataType,} from \"../../Redux/ProfileReducer\";\r\nimport commonStyle from \"../Common/boxStyle.module.scss\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../Redux/reduxStore\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {myUserID} from \"../../Redux/AuthReducer\";\r\nimport {placeholderText} from \"../Common/TextAreaForm/textAreaData\";\r\n\r\ntype ProfilePropsType = {\r\n    userID: number\r\n}\r\n\r\nexport const ProfileFC = React.memo((props: ProfilePropsType) => {\r\n    const postsData = useSelector<AppRootState, Array<PostType>>(state => state.ProfilePage.postsData);\r\n    const profile = useSelector<AppRootState, ProfileDataType>(state => state.ProfilePage.profile);\r\n    const dispatch = useDispatch();\r\n\r\n    const addMessage = (text: string) =>{\r\n        return  dispatch(addPostActionAC(text))\r\n    }\r\n    return (\r\n        <div className={`${styles.wrapper} ${commonStyle.mainBox}`}>\r\n            <ProfileInfo profile={profile}/>\r\n            {props.userID === myUserID && <MyPosts placeholderText={placeholderText.profileAreaText}\r\n                                                   callBack={addMessage}\r\n                                                   postsData={postsData}/>}\r\n        </div>)\r\n\r\n})","import React, {FC, useEffect} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getProfileThunkCreator, getUserStatusTC} from \"../../Redux/ProfileReducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../HOC/withAuthRedirect\";\r\nimport {ProfileFC} from \"./ProfileFC\";\r\n\r\n\r\n\r\n\r\nexport const ProfileContainerFC: FC = React.memo(() => {\r\n    const params = useParams<'userId'>();\r\n    const userId = Number(params.userId); //эта id взялась из компоненты app из роута <Route path={\"/profile/:userId\"}\r\n    const dispatch = useDispatch();\r\n    const Redirect = WithAuthRedirect(ProfileFC);\r\n\r\n    useEffect(() => {\r\n        dispatch(getProfileThunkCreator(userId));\r\n        dispatch(getUserStatusTC(userId));\r\n    }, [userId, dispatch]);\r\n\r\n    return <Redirect userID={userId}/>\r\n\r\n\r\n})\r\n\r\n\r\n\r\n","import styles from \"../Dialogs.module.scss\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {DialogsStateType} from \"../../../Redux/DialogsReducer\";\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    DialogPage: DialogsStateType\r\n}\r\n\r\nexport function DialogItem(props: DialogItemPropsType) {\r\n\r\n    let dialogItem = props.DialogPage.dialogs.map(m =>\r\n        <div className={styles.dialogItemWrapper} key={m.id}>\r\n            <div className={styles.userAvatarAndName}>\r\n                <NavLink\r\n                    to={\"/friendDialog/\" + m.id}>\r\n                    <img src={m.avatar}\r\n                         alt={\"friendAvatar\"}/>\r\n                    {m.name}\r\n                </NavLink>\r\n            </div>\r\n            <div>{m.message}</div>\r\n        </div>\r\n    )\r\n    return (\r\n        <>\r\n            {dialogItem}\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport styles from \"../Dialogs.module.scss\"\r\nimport {MyProfilePhoto} from \"../../Common/MyProfilePhoto/MyProfilePhoto\";\r\n\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport function Message (props: MessageType) {\r\n\r\n    return (\r\n        <div className={styles.messagesWrapper}>\r\n            <div className={styles.dialogItem}>{props.message}</div>\r\n            <MyProfilePhoto/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React, {useCallback} from \"react\";\r\nimport styles from \"./Dialogs.module.scss\"\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {addMessageAC, DialogsStateType} from \"../../Redux/DialogsReducer\";\r\nimport {TextAreaForm} from \"../Common/TextAreaForm/TextAreaForm\";\r\nimport {placeholderText} from \"../Common/TextAreaForm/textAreaData\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype DialogsPropsType = {\r\n    DialogPage: DialogsStateType\r\n}\r\n\r\nexport const Dialogs = React.memo((props: DialogsPropsType)=> {\r\n    const dispatch = useDispatch();\r\n    const messagesElements = props.DialogPage.messages.map((m) => <Message key={m.id}\r\n                                                                           message={m.message}\r\n                                                                           id={m.id}/>)\r\n    const addMessage = useCallback((text: string) => {\r\n        dispatch(addMessageAC(text));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className={styles.dialogsWrapper}>\r\n                <DialogItem DialogPage={props.DialogPage}/>\r\n                {messagesElements}\r\n            <TextAreaForm callBack={addMessage}\r\n                          placeholderText={placeholderText.dialogsAreaText}/>\r\n        </div>\r\n\r\n\r\n    )\r\n})\r\n","import React, {FC} from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../Redux/reduxStore\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {WithAuthRedirect} from \"../HOC/withAuthRedirect\";\r\nimport {DialogsStateType} from \"../../Redux/DialogsReducer\";\r\n\r\n\r\n\r\nconst DialogContainerFC: FC = () => {\r\n\r\n    const dialogPage = useSelector<AppRootState, DialogsStateType>(state => state.DialogPage);\r\n\r\n    const Redirect = WithAuthRedirect(Dialogs)\r\n    return (\r\n            <Redirect DialogPage={dialogPage}/>\r\n    );\r\n};\r\n/*compose<React.ComponentType>(\r\n    WithAuthRedirect\r\n)(DialogContainerFC);*/\r\nexport default DialogContainerFC","import React from 'react';\r\n\r\n\r\n\r\nexport function Events(){\r\n    return(\r\n        <div >\r\n            <div>Events</div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {WithAuthRedirect} from \"../HOC/withAuthRedirect\";\r\nimport {Events} from \"./Events\";\r\n\r\nexport function EventsContainer(){\r\n    const Redirect = WithAuthRedirect(Events);\r\n    return(\r\n        <div>\r\n            <Redirect/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nconst Photos = () => {\r\n    return (\r\n        <div>\r\n            Photos\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Photos;","import React from 'react';\r\nimport styles from \"./Photos.module.scss\";\r\nimport {WithAuthRedirect} from \"../HOC/withAuthRedirect\";\r\nimport Photos from \"./Photos\";\r\n\r\n\r\nfunction PhotosContainer() {\r\n    const Redirect = WithAuthRedirect(Photos)\r\n    return(\r\n        <div className={styles.content}>\r\n            <Redirect/>\r\n        </div>\r\n    );\r\n}\r\n/*compose<React.ComponentType>(WithAuthRedirect)(PhotosContainer);*/\r\nexport default PhotosContainer","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../Redux/Login-reducer\";\r\nimport {Navigate, useNavigate} from \"react-router-dom\";\r\nimport {AppRootState} from \"../../Redux/reduxStore\";\r\nimport {checkAuthType} from \"../../Redux/AuthReducer\";\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate()\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: \"Email is required\"\r\n\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: \"Password is required\"\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            navigate('/profile/21748')\r\n        }\r\n    })\r\n    const isAuth = useSelector<AppRootState,checkAuthType>(state => state.Auth.isAuth);\r\n    if (isAuth === \"logged\"){\r\n        return <Navigate to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <h1>Login</h1>\r\n            <div>\r\n                <p>\r\n                    To log in get registered <a href={\"https://social-network.samuraijs.com/signUp\"}>here</a>\r\n                </p>\r\n                <p>\r\n                    or use common test accounts credentials:\r\n                </p>\r\n                <p>\r\n                    Email: free@samuraijs.com\r\n                </p>\r\n                <p>\r\n                    Password: free\r\n                </p>\r\n            </div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <input placeholder={\"email\"}\r\n                           {...formik.getFieldProps(\"email\")}/>\r\n                </div>\r\n                {formik.errors.email ? <div style={ {color:\"red\"}}>{formik.errors.email}</div> : null}\r\n                <div>\r\n                    <input type={\"password\"}\r\n                           placeholder={\"Password\"}\r\n                           {...formik.getFieldProps(\"password\")}/>\r\n                </div>\r\n                {formik.errors.password ? <div style={ {color:\"red\"}}>{formik.errors.password}</div> : null}\r\n                <div>\r\n                    <label>\r\n                        <input type={\"checkbox\"}\r\n                               {...formik.getFieldProps(\"rememberMe\")}\r\n                               checked={formik.values.rememberMe}/> Remember me</label>\r\n                </div>\r\n                <div>\r\n                    <button type={\"submit\"}>Login</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {FC, useEffect} from 'react';\r\nimport './App.scss';\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {NavBar} from \"./components/Navbar/Navbar\";\r\nimport {Route, Routes, Navigate} from \"react-router-dom\";\r\nimport {AppRootState, store} from \"./Redux/reduxStore\";\r\nimport UsersContainerFC from './components/Users/UsersContainerFC';\r\nimport {ProfileContainerFC} from \"./components/Profile/ProfileContainerFC\";\r\nimport DialogContainerFC from \"./components/Dialogs/DialogContainerFC\";\r\nimport {EventsContainer} from \"./components/Events/EventsContainer\";\r\nimport PhotosContainer from \"./components/Photos/PhotosContainer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {authTC, checkAuthType} from \"./Redux/AuthReducer\";\r\nimport {Login} from \"./components/Login/Login\";\r\n\r\n\r\nconst App: FC = () => {\r\n    const state = store.getState();\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector<AppRootState, checkAuthType>(state => state.Auth.isAuth);\r\n\r\n    useEffect(() => {\r\n        dispatch(authTC());\r\n    }, [dispatch]);\r\n\r\n    if (isAuth === \"idle\") {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <div className={\"mainContent\"}>\r\n                {isAuth=== \"logged\" && <NavBar SideBar={state.SideBar}/>}\r\n                <Routes>\r\n                    <Route path={\"/\"} element={<Navigate to={'/profile/21748'}/>}/>\r\n                    <Route path={\"/login\"} element={<Login/>}/>\r\n                    <Route path={\"/profile/:userId\"} element={<ProfileContainerFC/>}/>\r\n                    <Route path={\"/profile\"} element={<Navigate to={'/profile/21748'}/>}/>\r\n                    <Route path={\"/dialogs\"} element={<DialogContainerFC/>}/>\r\n                    <Route path={\"/events\"} element={<EventsContainer/>}/>\r\n                    <Route path={\"/photos\"} element={<PhotosContainer/>}/>\r\n                    <Route path={\"/users\"} element={<UsersContainerFC/>}/>\r\n                    <Route path={\"/*\"} element={<div>404</div>}/>\r\n                </Routes>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import './index.scss';\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./App\";\nimport {store} from \"./Redux/reduxStore\";\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\n\n// @ts-ignore\nwindow.store = store\n\n    ReactDOM.render(\n            <Provider store={store}>\n                <HashRouter>\n                    <App/>\n                </HashRouter>\n            </Provider>,\n        document.getElementById('root')\n    );\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"Dialogs_dialogsWrapper__3F0bp\",\"dialogItemWrapper\":\"Dialogs_dialogItemWrapper__2Stxa\",\"userAvatarAndName\":\"Dialogs_userAvatarAndName__3RqOE\",\"messagesWrapper\":\"Dialogs_messagesWrapper__3fn-w\",\"dialogItem\":\"Dialogs_dialogItem__2sb9K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navWrapper\":\"Navbar_navWrapper__HbHpr\",\"NavItem\":\"Navbar_NavItem__3u4wb\",\"active\":\"Navbar_active__2IssC\",\"ChatBlock\":\"Navbar_ChatBlock__1-WE4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersWrapper\":\"users_usersWrapper__2NhZI\",\"usersBlock\":\"users_usersBlock__30vL-\",\"avatarAndFollowButton\":\"users_avatarAndFollowButton__3flk2\",\"avatar\":\"users_avatar__3IP3J\",\"nameAndStatus\":\"users_nameAndStatus__nYsqe\",\"status\":\"users_status__2gbbh\",\"name\":\"users_name__3sX1D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileInfo_wrapper__2zQ9G\",\"statusBlock\":\"ProfileInfo_statusBlock__A6KlW\",\"profileName\":\"ProfileInfo_profileName__aXVcE\",\"profileStatus\":\"ProfileInfo_profileStatus__3sbu8\",\"contacts\":\"ProfileInfo_contacts__3rDuc\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__WC_wT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerTopLevel\":\"Header_headerTopLevel__2weLr\",\"headerWrapper\":\"Header_headerWrapper__2JC-5\",\"loginBlock\":\"Header_loginBlock__1rezt\",\"login\":\"Header_login__2_qsa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatBlock\":\"ChatBlock_ChatBlock__FFWkt\",\"Title\":\"ChatBlock_Title__qYtbH\",\"imgProfilePhoto\":\"ChatBlock_imgProfilePhoto__qg3XR\",\"OnlineDot\":\"ChatBlock_OnlineDot__gbMh0\",\"onlineFriendsWrapper\":\"ChatBlock_onlineFriendsWrapper__mZ0wM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__3dKt0\",\"editableDiv\":\"Profile_editableDiv__GFY9u\",\"input\":\"Profile_input__1jMdf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myProfilePhotoWrapper\":\"MyProfilePhoto_myProfilePhotoWrapper__3ZNPd\",\"mySmallPhoto\":\"MyProfilePhoto_mySmallPhoto__v9qAS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemWrapper\":\"Post_itemWrapper__1z8ce\",\"userAndLoginBlock\":\"Post_userAndLoginBlock__2x_uT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__sox7b\",\"posts\":\"MyPosts_posts__2zln9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"TextAreaForm_formWrapper__2lVua\",\"textArea\":\"TextAreaForm_textArea__2ZXO2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderContainer\":\"Preloader_preloaderContainer__13SXq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBox\":\"boxStyle_mainBox__24wr7\"};"],"sourceRoot":""}