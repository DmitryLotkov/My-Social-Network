{"version":3,"sources":["components/Common/Preloader/Preloader.module.scss","components/Common/boxStyle.module.scss","Redux/AppReducer.tsx","components/api.tsx","Redux/AuthReducer.tsx","Images/defaultUserImage.jpg","components/Common/MyProfilePhoto/MyProfilePhoto.tsx","components/Common/Selectors/Selectors.ts","components/Header/TopContainer.tsx","components/Header/Header.tsx","components/Navbar/ChatBlock.tsx","components/Navbar/SideBar.tsx","Redux/ProfileReducer.tsx","Redux/DialogsReducer.tsx","Redux/NavBarReducer.tsx","Redux/UsersReducer.tsx","Redux/reduxStore.ts","components/Users/Users.tsx","components/Common/Preloader/Preloader.tsx","components/Users/UsersContainerFC.tsx","components/Profile/ProfileStatus.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Common/TextAreaForm/textAreaData.ts","components/Common/TextAreaForm/TextAreaForm.tsx","components/Profile/MyPosts.tsx","components/Profile/ProfileFC.tsx","components/Profile/ProfileContainerFC.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogContainerFC.tsx","components/Events/Events.tsx","components/Events/EventsContainer.tsx","components/Photos/Photos.tsx","components/Photos/PhotosContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.scss","components/Navbar/Navbar.module.scss","components/Users/users.module.scss","components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.scss","components/Navbar/ChatBlock.module.scss","components/Header/Header.module.scss","components/Profile/Profile.module.scss","components/Common/MyProfilePhoto/MyProfilePhoto.module.scss","components/Profile/MyPosts/Post/Post.module.scss","components/Profile/MyPosts.module.scss","components/Common/TextAreaForm/TextAreaForm.module.scss"],"names":["module","exports","ACTIONS_TYPE","instance","axios","create","withCredentials","baseURL","headers","userAPI","currentPage","pageSize","get","profileAPI","userID","status","put","authAPI","post","delete","data","initialState","error","setAppErrorAC","type","APP_SET_ERROR","myUserID","id","email","login","isInitialized","isLoggedIn","setIsLoggedInAC","AUTH_SET_IS_LOGGED_IN","setInitializedAC","AUTH_SET_IS_INITIALIZED","setAuthProfileAC","profileData","AUTH_SET_PROFILE_DATA","MyProfilePhoto","React","memo","myPhoto","useSelector","state","ProfilePage","photo","myLoginName","Auth","className","styles","myProfilePhotoWrapper","mySmallPhoto","src","defaultUserPhoto","alt","userName","statusSelector","userIDSelector","profile","userId","postsDataSelector","postsData","profileSelector","isLoggedInSelector","isInitializedSelector","isFetchingSelector","UsersPage","isFetching","usersSelector","items","pageSizeSelector","currentPageSelector","totalUserCountSelector","totalCount","followingArrSelector","following","TopContainer","navigate","useNavigate","dispatch","useDispatch","headerContent","loginBlock","Button","onClick","then","res","resultCode","catch","console","log","message","Header","headerWrapper","ChatBlock","props","chatStyles","onlineFriendsWrapper","imgProfilePhoto","avatar","OnlineDot","SideBar","onlineFriends","map","f","to","style","sideWrapper","NavItem","color","isActive","Title","getProfileTC","response","setUserProfileAC","getUserStatusTC","setStatusAC","SET_SOME_USER_PROFILE","SET_STATUS","v1","likesCount","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","photos","small","large","profileReducer","action","ADD_POST","dialogs","name","messages","dialogsReducer","text","sidebarReducer","followSuccess","unFollowSuccess","setUsersAC","users","setCurrentPageAC","setUsersTotalCountAC","serverTotalUsersCount","toggleIsFetchingAC","toggleFollowingProgressAC","followingIsProgress","rootReducer","combineReducers","DialogPage","u","followed","filter","App","store","createStore","applyMiddleware","thunk","window","Users","pagesCount","Math","ceil","totalUserCount","userPhoto","usersWrapper","Pagination","onChange","event","page","onPageChanged","size","variant","shape","count","usersBlock","avatarAndFollowButton","disabled","followingInProgress","some","unfollowTC","followTC","nameAndStatus","Preloader","preloaderContainer","CircularProgress","UserContainerFC","followingArr","useEffect","getUsersTC","pageNumber","onPageChangedCTC","follow","unfollow","ProfileStatus","useState","editMode","setEditMode","localStatus","setLocalStatus","activateEditMode","deactivateEditMode","updateUserStatusTC","editableDiv","input","e","currentTarget","value","onKeyPress","key","onBlur","autoFocus","ProfileInfo","wrapper","descriptionBlock","statusBlock","profileName","profileStatus","Post","setLikesCount","round","random","itemWrapper","userAndLoginBlock","likeCount","placeholderText","TextAreaForm","formik","useFormik","initialValues","validate","values","errors","length","onSubmit","resetForm","callBack","handleSubmit","formWrapper","textArea","maxLength","placeholder","getFieldProps","MyPosts","postsElements","p","reverse","postBlock","posts","ProfileFC","commonStyle","mainBox","ProfileContainerFC","params","useParams","Number","DialogItem","dialogItem","m","userAvatarAndName","Message","messagesWrapper","Dialogs","messagesElements","addMessage","useCallback","addMessageAC","dialogsWrapper","DialogContainerFC","dialogPage","Events","EventsContainer","Photos","PhotosContainer","content","Login","serverError","test","password","rememberMe","removeError","Grid","container","justifyContent","item","FormControl","FormLabel","href","rel","target","FormGroup","TextField","label","margin","onFocus","touched","FormControlLabel","control","Checkbox","checked","getState","finally","path","element","UsersContainerFC","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a4bbd8d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderContainer\":\"Preloader_preloaderContainer__13SXq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBox\":\"boxStyle_mainBox__24wr7\"};","\r\n\r\n//types\r\nexport enum ACTIONS_TYPE {\r\n    APP_SET_ERROR = \"APP-SET-ERROR\"\r\n\r\n}\r\n\r\nexport type AuthActionsType = ReturnType<typeof setAppErrorAC>\r\n\r\ntype InitialStateType = {\r\n    error: string\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    error: \"\"\r\n}\r\n\r\n//reducer\r\nexport const appReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case ACTIONS_TYPE.APP_SET_ERROR:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action creators\r\nexport const setAppErrorAC = (error: string) =>\r\n    ({type: ACTIONS_TYPE.APP_SET_ERROR, error} as const);\r\n\r\n\r\n\r\n\r\n\r\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {UsersType} from \"../Redux/UsersReducer\";\r\nimport {ProfileDataType} from \"../Redux/ProfileReducer\";\r\nimport {LoginParamsType} from \"../Redux/AuthReducer\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"3ca3376c-f1c7-42b6-b439-a7f59c674e78\",\r\n    }\r\n})\r\nexport type AuthDataType = {\r\n    id:number,\r\n    email: string\r\n    login:string\r\n}\r\ntype RespType<T = {}> = {\r\n    resultCode: 0\r\n    data: T\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n}\r\nexport const userAPI = {\r\n\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<UsersType>(`users?page=${currentPage}&count=${pageSize}`);\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userID: number | null) {\r\n        return instance.get<ProfileDataType>(`profile/${userID}`);\r\n    },\r\n    getStatus(userID: number | null) {\r\n\r\n        return instance.get<AxiosResponse<string>, any>(`profile/status/${userID}`);\r\n    },\r\n    updateStatus(status: string | null) {\r\n        return instance.put<AxiosResponse<RespType>,any>(`profile/status`, {status: status})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<RespType<AuthDataType>>(`auth/me`);\r\n    },\r\n    follow(userID: string | undefined) {\r\n        return instance.post<RespType<AuthDataType>>(`follow/${userID}`);\r\n    },\r\n    unfollow(userID: string | undefined) {\r\n        return instance.delete<RespType<AuthDataType>>(`follow/${userID}`);\r\n    },\r\n    login(data: LoginParamsType){\r\n        return instance.post<RespType<AuthDataType>>(`auth/login`, data);\r\n    },\r\n    logout(){\r\n        return instance.delete<RespType>('/auth/login');\r\n    }\r\n\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, AuthDataType} from \"../components/api\";\r\nimport {setAppErrorAC} from \"./AppReducer\";\r\n\r\n\r\nexport const myUserID = 21748;\r\n\r\n//types\r\nexport enum ACTIONS_TYPE {\r\n    AUTH_SET_IS_LOGGED_IN = \"SET-IS-LOGGED-IN\",\r\n    AUTH_SET_IS_INITIALIZED = \"SET-IS-INITIALIZED\",\r\n    AUTH_SET_PROFILE_DATA = \"SET-PROFILE-DATA\",\r\n}\r\n\r\n\r\n/*type ThunkType = ThunkAction<void, AppRootStateType, unknown, AuthActionsType>*/\r\n\r\nexport type AuthActionsType =\r\n    ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setInitializedAC>\r\n    | ReturnType<typeof setAuthProfileAC>\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\ntype InitialStateType = {\r\n    data: AuthDataType,\r\n    isInitialized: boolean\r\n    isLoggedIn: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    data: {\r\n        id: 0,\r\n        email: \"\",\r\n        login: \"\"\r\n    },\r\n    isInitialized: false,\r\n    isLoggedIn: false\r\n\r\n}\r\n//thunks\r\nexport const initializeAppTC = () => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.me()\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(true));\r\n                    dispatch(setAuthProfileAC(res.data.data));\r\n\r\n                }\r\n            })\r\n            .catch((error: Error) => {\r\n                console.log(error.message)\r\n            })\r\n            .finally(() => {\r\n                dispatch(setInitializedAC(true));\r\n            })\r\n    }\r\n}\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n\r\n    authAPI.login(data)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(true));\r\n                } else {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                }\r\n            }\r\n        )\r\n        .catch((error: Error) => {\r\n            console.log(error.message)\r\n        })\r\n}\r\nexport const logOutTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.logout()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(false));\r\n                }\r\n            })\r\n            .catch((error: Error) => {\r\n                console.log(error.message);\r\n            })\r\n\r\n    }\r\n}\r\n//reducer\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case ACTIONS_TYPE.AUTH_SET_IS_LOGGED_IN:\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        case ACTIONS_TYPE.AUTH_SET_IS_INITIALIZED:\r\n            return {...state, isInitialized: action.isInitialized}\r\n        case ACTIONS_TYPE.AUTH_SET_PROFILE_DATA:\r\n            return {...state, data: action.data}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action creators\r\nexport const setIsLoggedInAC = (isLoggedIn: boolean) =>\r\n    ({type: ACTIONS_TYPE.AUTH_SET_IS_LOGGED_IN, isLoggedIn} as const);\r\n\r\nexport const setInitializedAC = (isInitialized: boolean) =>\r\n    ({type: ACTIONS_TYPE.AUTH_SET_IS_INITIALIZED, isInitialized} as const);\r\n\r\nexport const setAuthProfileAC = (profileData: AuthDataType) =>\r\n    ({type: ACTIONS_TYPE.AUTH_SET_PROFILE_DATA, data: profileData} as const);\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/defaultUserImage.ed37b80a.jpg\";","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../Redux/reduxStore\";\r\nimport styles from \"./MyProfilePhoto.module.scss\";\r\nimport defaultUserPhoto from \"../../../Images/defaultUserImage.jpg\";\r\n\r\nexport const MyProfilePhoto = React.memo(() =>{\r\n    const myPhoto = useSelector<AppRootStateType, string | undefined>(state => state.ProfilePage.photo);\r\n    const myLoginName = useSelector<AppRootStateType, string | null>(state => state.Auth.data.login);\r\n\r\n    return (\r\n        <div className={styles.myProfilePhotoWrapper}>\r\n            <img className={styles.mySmallPhoto} src={myPhoto || defaultUserPhoto} alt={\"userPhoto\"}/>\r\n            <div className={styles.userName}>\r\n                {myLoginName}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {AppRootStateType} from \"../../../Redux/reduxStore\";\r\nimport {UserType} from \"../../../Redux/UsersReducer\";\r\nimport {PostType, ProfileDataType} from \"../../../Redux/ProfileReducer\";\r\n\r\nexport const statusSelector = (state:AppRootStateType):string =>{\r\n    return state.ProfilePage.status;\r\n}\r\nexport const userIDSelector = (state:AppRootStateType):number =>{\r\n    return state.ProfilePage.profile.userId;\r\n}\r\nexport const postsDataSelector = (state:AppRootStateType):Array<PostType> =>{\r\n    return state.ProfilePage.postsData;\r\n}\r\nexport const profileSelector = (state:AppRootStateType):ProfileDataType =>{\r\n    return state.ProfilePage.profile;\r\n}\r\nexport const isLoggedInSelector = (state:AppRootStateType):boolean =>{\r\n    return state.Auth.isLoggedIn;\r\n}\r\nexport const isInitializedSelector = (state:AppRootStateType):boolean =>{\r\n    return state.Auth.isInitialized;\r\n}\r\nexport const isFetchingSelector = (state:AppRootStateType):boolean =>{\r\n    return state.UsersPage.isFetching;\r\n}\r\nexport const usersSelector = (state:AppRootStateType):UserType[] =>{\r\n    return state.UsersPage.items;\r\n}\r\nexport const pageSizeSelector = (state:AppRootStateType):number =>{\r\n    return state.UsersPage.pageSize;\r\n}\r\nexport const currentPageSelector = (state:AppRootStateType):number =>{\r\n    return state.UsersPage.currentPage;\r\n}\r\nexport const totalUserCountSelector = (state:AppRootStateType):number =>{\r\n    return state.UsersPage.totalCount;\r\n}\r\nexport const followingArrSelector = (state:AppRootStateType):Array<string> =>{\r\n    return state.UsersPage.following;\r\n}\r\n\r\n","import React from 'react';\r\nimport styles from \"./Header.module.scss\"\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logOutTC} from \"../../Redux/AuthReducer\";\r\nimport {MyProfilePhoto} from \"../Common/MyProfilePhoto/MyProfilePhoto\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {isLoggedInSelector} from \"../Common/Selectors/Selectors\";\r\n\r\n\r\nexport function TopContainer() {\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector(isLoggedInSelector);\r\n\r\n    const logOutHandler = () =>{\r\n        dispatch(logOutTC());\r\n        navigate(\"/login\")\r\n    }\r\n\r\n    return (\r\n        <div className={styles.headerContent}>\r\n            <img src={\"https://templates.envytheme.com/zust/default/assets/images/logo.png\"} alt=\"logo\"/>\r\n                <div className={styles.loginBlock}>\r\n                    {isLoggedIn &&<MyProfilePhoto/>}\r\n                    {isLoggedIn && <Button className={styles.login} onClick={logOutHandler}>\r\n                        Log out\r\n                    </Button>}\r\n                </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport styles from \"./Header.module.scss\"\r\nimport {TopContainer} from \"./TopContainer\";\r\n\r\n\r\n\r\nexport function Header(){\r\n    return(\r\n            <header className={styles.headerWrapper}>\r\n                <TopContainer/>\r\n            </header>\r\n\r\n    )\r\n}","import {OnlineFriendType} from \"../OldComponents/OldStore\";\r\nimport React from \"react\";\r\nimport chatStyles from \"./ChatBlock.module.scss\"\r\n\r\nexport function ChatBlock(props: OnlineFriendType) {\r\n\r\n    return (\r\n            <div className={chatStyles.onlineFriendsWrapper}>\r\n                <img className={chatStyles.imgProfilePhoto} src={props.avatar} alt={\"onlineFriendAvatar\"}/>\r\n                <span className={chatStyles.OnlineDot}/>\r\n            </div>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport style from \"./Navbar.module.scss\"\r\nimport chatStyles from \"./ChatBlock.module.scss\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {SideBarType} from \"../OldComponents/OldStore\";\r\nimport {ChatBlock} from \"./ChatBlock\";\r\nimport {myUserID} from \"../../Redux/AuthReducer\";\r\n\r\ntype NavBarPropsType = {\r\n    SideBar: SideBarType,\r\n}\r\n\r\nexport function SideBar(props: NavBarPropsType) {\r\n\r\n    let onlineFriends = props.SideBar.onlineFriends.map((f) =>\r\n        <NavLink key={f.id} to={\"/friends\" + f.id}>\r\n            <ChatBlock\r\n                       id={f.id}\r\n                       avatar={f.avatar}/>\r\n        </NavLink>)\r\n    return (\r\n        <aside className={style.sideWrapper}>\r\n            <div className={style.NavItem}>\r\n                <NavLink  to={`/profile/${myUserID}`} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Profile</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/dialogs\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Messages</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/events\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Events</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/photos\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Photos</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/users\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Find Friends</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/settings\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Settings</NavLink>\r\n            </div>\r\n\r\n            <div className={chatStyles.ChatBlock}>\r\n                <span className={chatStyles.Title}>Chat online</span>\r\n                {onlineFriends}\r\n            </div>\r\n        </aside>\r\n    )\r\n}\r\n\r\n","import {v1} from \"uuid\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI} from \"../components/api\";\r\nimport {ActionsTypes} from \"./ActionsTypes\";\r\nimport {myUserID} from \"./AuthReducer\";\r\n\r\n\r\nexport enum ACTIONS_TYPE {\r\n    SET_PROFILE = \"SET-PROFILE\",\r\n    ADD_POST = \"ADD-POST\",\r\n    SET_MY_PROFILE_PHOTO = \"SET-MY-PROFILE_PHOTO\",\r\n    UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\",\r\n    SET_SOME_USER_PROFILE = \"SET-SOME-USER-PROFILE\",\r\n    SET_STATUS = \"SET-STATUS\"\r\n}\r\nexport type PostTextType = {\r\n    text: string\r\n}\r\ntype ProfilePageType = {\r\n    postsData: Array<PostType>\r\n    profile: ProfileDataType\r\n    photo: string | undefined\r\n    status: string\r\n}\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type userProfileContactType = {\r\n    facebook: string | undefined\r\n    website: string | null\r\n    vk: string | undefined\r\n    twitter: string | undefined\r\n    instagram: string | undefined\r\n    youtube: string | undefined\r\n    github: string | null | undefined\r\n    mainLink: string | null\r\n}\r\nexport type userProfilePhotosType = {\r\n    small: string | undefined\r\n    large: string | undefined\r\n}\r\nexport type ProfileDataType = {\r\n    aboutMe: string | null\r\n    contacts: userProfileContactType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string | null\r\n    userId: number\r\n    photos: userProfilePhotosType\r\n\r\n}\r\nexport const getProfileTC = (userId: number | null) => {\r\n    return (dispatch: Dispatch) => {\r\n\r\n        profileAPI.getProfile(userId)\r\n            .then(response => {\r\n                dispatch(setUserProfileAC(response.data));\r\n            }).catch(() =>{\r\n            console.log(\"Error in getProfile\")\r\n        })\r\n    }\r\n}\r\nexport const getUserStatusTC = (userId: number | null) => {\r\n    return  (dispatch: Dispatch) => {\r\n\r\n        profileAPI.getStatus(userId)\r\n\r\n            .then(res =>{\r\n                if(res.status === 200){\r\n                    dispatch(setStatusAC(res.data));\r\n                }\r\n            }).catch(()=>{\r\n            console.log(\"Error in getStatus\")\r\n        });\r\n\r\n    }\r\n}\r\n\r\nexport const updateUserStatusTC = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n\r\n        profileAPI.updateStatus(status)\r\n            .then(res => {\r\n                if(res.data.resultCode === 0){\r\n                    dispatch(setStatusAC(status))\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const addPostActionAC = (data: string) => {\r\n    return {\r\n        type: ACTIONS_TYPE.ADD_POST,\r\n        data\r\n    } as const\r\n}\r\nexport const updateNewPostTextAC = (text: PostTextType) => {\r\n\r\n    return {\r\n        type: ACTIONS_TYPE.UPDATE_NEW_POST_TEXT,\r\n        text\r\n    } as const\r\n}\r\nexport const setUserProfileAC = (profile: ProfileDataType) => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_SOME_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\nexport const setMyProfilePhotoAC = (photo: string | undefined) => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_MY_PROFILE_PHOTO,\r\n        photo\r\n    } as const\r\n}\r\nexport const setStatusAC = (status: string) => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_STATUS,\r\n        status\r\n    } as const\r\n\r\n}\r\nconst initialState: ProfilePageType = {\r\n\r\n    postsData: [\r\n        {id: v1(), message: \"Do you have a job for me? What if I find it?\", likesCount: 0},\r\n        {id: v1(), message: \"I want to be a serious frontend developer.\", likesCount: 0},\r\n        {id: v1(), message: \"What is the good weather today,isn't it?\", likesCount: 0},\r\n    ],\r\n    status: \"\",\r\n    photo: \"\",\r\n    profile: {\r\n        fullName: \"\",\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: \"\",\r\n        userId: myUserID,\r\n        aboutMe: \"\",\r\n        contacts: {\r\n            facebook: \"\",\r\n            github: \"\",\r\n            instagram: \"\",\r\n            mainLink: \"\",\r\n            twitter: \"\",\r\n            vk: \"\",\r\n            website: \"\",\r\n            youtube: \"\",\r\n        },\r\n        photos:\r\n            {\r\n                small: \"\",\r\n                large: \"\",\r\n            }\r\n    }\r\n}\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.ADD_POST: {\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, {id: v1(), message: action.data, likesCount: 0}]\r\n            };\r\n        }\r\n        case \"SET-SOME-USER-PROFILE\": {\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        }\r\n        case \"SET-MY-PROFILE_PHOTO\": {\r\n            return {\r\n                ...state, photo: action.photo\r\n            }\r\n        }\r\n        case \"SET-STATUS\": {\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default profileReducer","import {v1} from \"uuid\";\r\nimport {ActionsTypes} from \"./ActionsTypes\";\r\n\r\nexport const addMessageAC = (text: string) => {\r\n    return {\r\n        type: \"ADD-DIALOG-MESSAGE\",\r\n        text\r\n    } as const\r\n}\r\n\r\nexport type MessagesType = {\r\n    id: string\r\n    message: string\r\n}\r\nexport type DialogsType = {\r\n    id: string\r\n    name: string\r\n    avatar: string\r\n    message: string\r\n}\r\nexport type DialogsStateType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\nlet initialState: DialogsStateType = {\r\n\r\n    dialogs: [\r\n        {\r\n            id: v1(),\r\n            name: \"Boris Jonson\",\r\n            avatar: \"https://themified.com/friend-finder/images/users/user-4.jpg\",\r\n            message: \"What is the weather forecast for tomorrow?\"\r\n        },\r\n\r\n    ],\r\n    messages: [\r\n        {id: v1(), message: \"Looks like it will be sunny tomorrow=)\"}\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsStateType = initialState, action: ActionsTypes): DialogsStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-DIALOG-MESSAGE\": {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: v1(), message: action.text}]\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\nexport default dialogsReducer;","import {SideBarType} from \"../components/OldComponents/OldStore\";\r\nimport {v1} from \"uuid\";\r\n\r\nlet initialState: SideBarType = {\r\n    onlineFriends: [\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-4.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-3.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-6.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-2.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-7.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-10.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-9.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-5.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-8.jpg\"},\r\n    ],\r\n}\r\nconst sidebarReducer = (state: SideBarType = initialState) => {\r\n    return state\r\n}\r\nexport default sidebarReducer;","import {authAPI, userAPI} from \"../components/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionsTypes} from \"./ActionsTypes\";\r\n\r\n\r\nexport const getUsersTC = (currentPage: number, pageSize: number) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        userAPI.getUsers(currentPage, pageSize)\r\n            .then(response => {\r\n                dispatch(toggleIsFetchingAC(false));\r\n                dispatch(setUsersAC(response.data.items));\r\n                dispatch(setUsersTotalCountAC(response.data.totalCount));\r\n            });\r\n    }\r\n}\r\nexport const onPageChangedCTC = (pageSize: number, pageNumber: number) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        dispatch(setCurrentPageAC(pageNumber));\r\n        userAPI.getUsers(pageNumber, pageSize)\r\n            .then(response => {\r\n                    dispatch(setUsersAC(response.data.items));\r\n                    dispatch(setUsersTotalCountAC(response.data.totalCount));\r\n                    dispatch(toggleIsFetchingAC(false));\r\n                }\r\n            )\r\n    }\r\n\r\n}\r\n\r\nexport const follow = (userID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgressAC(true, userID));\r\n        authAPI.follow(userID)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followSuccess(userID));\r\n                }\r\n                dispatch(toggleFollowingProgressAC(false, userID));\r\n            })\r\n    }\r\n}\r\n\r\nexport const unfollow = (userID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgressAC(true, userID));\r\n        authAPI.unfollow(userID)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n\r\n                    dispatch(unFollowSuccess(userID));\r\n                }\r\n                dispatch(toggleFollowingProgressAC(false, userID));\r\n            })\r\n    }\r\n}\r\nexport type LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type UserType = {\r\n    id: string,\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n    followed: boolean\r\n    photos: PhotosType\r\n\r\n}\r\nexport type UsersType = {\r\n    items: UserType[]\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    following: Array<string>\r\n}\r\n\r\nexport const followSuccess = (userID: string) => {\r\n    return {\r\n        type: \"FOLLOW\",\r\n        userID: userID,\r\n    } as const\r\n}\r\nexport const unFollowSuccess = (userID: string) => {\r\n    return {\r\n        type: \"UNFOLLOW\",\r\n        userID: userID,\r\n    } as const\r\n}\r\nexport const setUsersAC = (users: UserType[]) => {\r\n    return {\r\n        type: \"SET-USERS\",\r\n        users: users,\r\n    } as const\r\n}\r\nexport const setCurrentPageAC = (currentPage: number) => {\r\n    return {\r\n        type: \"SET-CURRENT-PAGE\",\r\n        currentPage: currentPage,\r\n    } as const\r\n}\r\nexport const setUsersTotalCountAC = (serverTotalUsersCount: number) => {\r\n    return {\r\n        type: \"SET-TOTAL-USERS-COUNT\",\r\n        totalCount: serverTotalUsersCount\r\n    } as const\r\n}\r\nexport const toggleIsFetchingAC = (isFetching: boolean) => {\r\n    return {\r\n        type: \"IS-FETCHING\",\r\n        isFetching: isFetching,\r\n    } as const\r\n}\r\n\r\nexport const toggleFollowingProgressAC = (followingIsProgress: boolean, userID: string) => {\r\n    return {\r\n        type: \"IS-FOLLOWING-PROGRESS\",\r\n        followingIsProgress: followingIsProgress,\r\n        userID: userID,\r\n    } as const\r\n}\r\n\r\nlet initialState: UsersType = {\r\n    items: [],\r\n    pageSize: 7,\r\n    totalCount: 1,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    following: [],\r\n}\r\nexport const userReducer = (state = initialState, action: ActionsTypes): UsersType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\": {\r\n            return {...state, items: state.items.map(u => u.id === action.userID ? {...u, followed: true} : u)}\r\n        }\r\n\r\n        case \"UNFOLLOW\": {\r\n            return {...state, items: state.items.map(u => u.id === action.userID ? {...u, followed: false} : u)}\r\n        }\r\n\r\n        case \"SET-USERS\": {\r\n            return {...state, items: action.users}\r\n        }\r\n\r\n        case \"SET-CURRENT-PAGE\": {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n\r\n        case \"SET-TOTAL-USERS-COUNT\": {\r\n            return {...state, totalCount: action.totalCount}\r\n        }\r\n\r\n        case \"IS-FETCHING\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        case \"IS-FOLLOWING-PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                following: action.followingIsProgress\r\n                    ? [...state.following, action.userID]\r\n                    : state.following.filter(id => id !== action.userID)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./ProfileReducer\";\r\nimport dialogsReducer from \"./DialogsReducer\";\r\nimport sidebarReducer from \"./NavBarReducer\";\r\nimport {userReducer} from \"./UsersReducer\";\r\nimport {authReducer} from \"./AuthReducer\";\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from \"./AppReducer\";\r\n\r\n\r\n\r\nexport type AppRootStateType = ReturnType <typeof rootReducer>\r\nconst rootReducer = combineReducers({\r\n    ProfilePage: profileReducer,\r\n    DialogPage: dialogsReducer,\r\n    SideBar: sidebarReducer,\r\n    UsersPage: userReducer,\r\n    Auth: authReducer,\r\n    App: appReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent} from \"react\";\r\nimport style from \"./users.module.scss\";\r\nimport userPhoto from \"../../Images/defaultUserImage.jpg\";\r\nimport {UserType} from \"../../Redux/UsersReducer\";\r\nimport Pagination from '@mui/material/Pagination';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\n\r\ntype usersPropsType = {\r\n    totalUserCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: UserType[]\r\n    followingInProgress: Array<string>\r\n    followTC: (userID: string) => void\r\n    unfollowTC: (userID: string) => void\r\n}\r\n\r\nexport function Users(props: usersPropsType) {\r\n\r\n    const pagesCount = Math.ceil(props.totalUserCount / props.pageSize);\r\n    const defaultUserPhoto: string = userPhoto;\r\n    const onPageHandler = (event: ChangeEvent<unknown>, page: number) => {\r\n        props.onPageChanged(page);\r\n    }\r\n    const navigate = useNavigate();\r\n\r\n    return <div className={style.usersWrapper}>\r\n        <Pagination color={\"primary\"}\r\n                    onChange={onPageHandler}\r\n                    size={\"small\"}\r\n                    variant={\"outlined\"}\r\n                    shape=\"rounded\"\r\n                    count={pagesCount}\r\n                    page={props.currentPage}\r\n        />\r\n        {props.users.map(u =>\r\n\r\n            <div key={u.id}>\r\n                <div className={style.usersBlock}>\r\n                    <div className={style.avatarAndFollowButton}>\r\n                        <img onClick={() => navigate(`/profile/${u.id}`)}\r\n                             className={style.avatar} src={u.photos.small ? u.photos.small : defaultUserPhoto}\r\n                             alt={\"user\"}/>\r\n                        <span>\r\n                            {u.followed ?\r\n                                <Button disabled={props.followingInProgress\r\n                                    .some(id => id === u.id)}\r\n                                        onClick={() => {\r\n                                            //ниже вызывается thunk creator из пропсов, в userContainerFC unfollowTC оборачивается dispatch\r\n                                            props.unfollowTC(u.id)\r\n                                        }\r\n                                        }>Unfollow</Button>\r\n\r\n                                : <Button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                          onClick={\r\n                                              () => {\r\n                                                  //ниже вызывается thunk creator из пропсов, в userContainerFC unfollowTC оборачивается dispatch\r\n                                                  //thunk creator нужен для связи DAL и BLL минуя UI\r\n                                                  props.followTC(u.id)\r\n                                              }\r\n                                          }>Follow</Button>\r\n                            }\r\n                            </span>\r\n                    </div>\r\n                    <div className={style.nameAndStatus}>\r\n                        <h3 className={style.name}>\r\n                            <div>{u.name}</div>\r\n                        </h3>\r\n                        <div className={style.status}>{`Status:  ${u.status ?? \"no status\"}`}</div>\r\n\r\n                        {/*<div className={style.location}>\r\n                            <div className={style.country}>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </div>*/}\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>)}\r\n    </div>\r\n\r\n}\r\n\r\n","import React from \"react\"\r\nimport styles from \"./Preloader.module.scss\"\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nexport function Preloader (){\r\n    return (\r\n        <div className={styles.preloaderContainer}>\r\n            <CircularProgress />\r\n        </div>)\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    follow, getUsersTC, onPageChangedCTC, unfollow\r\n} from \"../../Redux/UsersReducer\";\r\nimport React, {FC, useEffect} from \"react\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../Common/Preloader/Preloader\";\r\nimport {\r\n    currentPageSelector, followingArrSelector,\r\n    isFetchingSelector,\r\n    pageSizeSelector,\r\n    totalUserCountSelector,\r\n    usersSelector\r\n} from \"../Common/Selectors/Selectors\";\r\n\r\n\r\n\r\nconst UserContainerFC: FC = React.memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n    const users = useSelector(usersSelector);\r\n    const isFetching = useSelector(isFetchingSelector);\r\n    const pageSize = useSelector(pageSizeSelector);\r\n    const currentPage = useSelector(currentPageSelector);\r\n    const totalUserCount = useSelector(totalUserCountSelector);\r\n    const followingArr = useSelector(followingArrSelector);\r\n    // let Redirect= WithAuthRedirect(Users);\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersTC(currentPage, pageSize));\r\n    }, [currentPage, pageSize, dispatch])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(onPageChangedCTC(pageSize, pageNumber));\r\n    }\r\n    const unfollowTC = (userID: string) => {\r\n\r\n        dispatch(unfollow(userID))\r\n    }\r\n    const followTC = (userID: string) => {\r\n\r\n        dispatch(follow(userID))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isFetching ?\r\n                    <Preloader/> :\r\n                    <Users onPageChanged={onPageChanged}\r\n                                            currentPage={currentPage}\r\n                                            totalUserCount={totalUserCount}\r\n                                            pageSize={pageSize}\r\n                                            users={users}\r\n                                            followTC={followTC}\r\n                                            unfollowTC={unfollowTC}\r\n                                            followingInProgress={followingArr}/>\r\n            }\r\n        </>\r\n    )\r\n})\r\nexport default UserContainerFC\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport styles from \"./Profile.module.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {updateUserStatusTC} from \"../../Redux/ProfileReducer\";\r\nimport {statusSelector, userIDSelector} from \"../Common/Selectors/Selectors\";\r\n\r\n\r\nexport const ProfileStatus = React.memo(() => {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const [editMode, setEditMode] = useState<boolean>(true);\r\n    const status = useSelector(statusSelector);\r\n    const userId = useSelector(userIDSelector); //21748\r\n    const [localStatus, setLocalStatus] = useState(status);\r\n\r\n    const activateEditMode = () => {\r\n        setLocalStatus(status);\r\n        setEditMode(false);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        dispatch(updateUserStatusTC(localStatus));\r\n        setEditMode(true);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value);\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            deactivateEditMode();\r\n        }\r\n    }\r\n    if (editMode && userId !== 21748 ) {\r\n        return (\r\n            <div>\r\n                {status}\r\n            </div>\r\n        )\r\n    }\r\n    if(editMode && userId === 21748 && !status){\r\n\r\n        return <div className={styles.editableDiv}\r\n            onClick={activateEditMode}>\r\n            {\"Set status\"}\r\n        </div>\r\n    }\r\n    if(editMode && userId === 21748){\r\n        return <div className={styles.editableDiv}\r\n                    onClick={activateEditMode}>\r\n            {status}\r\n        </div>\r\n    }\r\n\r\n    else return <input className={styles.input}\r\n                       onChange={changeTitle}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       onBlur={deactivateEditMode}\r\n                       type=\"text\"\r\n                       autoFocus={true}\r\n                       value={localStatus}/>\r\n\r\n\r\n});\r\n\r\n","import React from \"react\";\r\nimport styles from \"./ProfileInfo.module.scss\"\r\nimport {\r\n    ProfileDataType,\r\n} from \"../../../../Redux/ProfileReducer\";\r\nimport defaultUserPhoto from \"./../../../../Images/defaultUserImage.jpg\";\r\nimport {ProfileStatus} from \"../../ProfileStatus\";\r\n\r\ntype profileInfoPropsType = {\r\n    profile: ProfileDataType\r\n\r\n}\r\n\r\nexport const ProfileInfo = React.memo((props: profileInfoPropsType)=> {\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.descriptionBlock}>\r\n                <img src={props.profile?.photos.large ?? defaultUserPhoto} alt={\"userPhoto\"}/>\r\n            </div>\r\n            <div className={styles.statusBlock}>\r\n                <div className={styles.profileName}>{props.profile.fullName}</div>\r\n                <div className={styles.profileStatus}>\r\n                    <ProfileStatus/>\r\n                </div>\r\n                <div className={styles.lookingForAJobDescription}>\r\n                    Looking for a job status: { props.profile.lookingForAJobDescription}\r\n                </div>\r\n                <div className={styles.contacts}>\r\n                    <span>contacts: </span>\r\n                    <div>facebook: {props.profile.contacts.facebook}</div>\r\n                    <div>instagram: {props.profile.contacts.instagram}</div>\r\n                    <div>YouTube: {props.profile.contacts.youtube}</div>\r\n                    <div>Vk: {props.profile.contacts.vk}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})","import React, {useEffect, useState} from \"react\";\r\nimport styles from \"./Post.module.scss\"\r\nimport {MyProfilePhoto} from \"../../../Common/MyProfilePhoto/MyProfilePhoto\";\r\n\r\ntype MyPostsPropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nexport function Post(props: MyPostsPropsType) {\r\n    const [likesCount, setLikesCount] = useState<number>();\r\n    const maxLikesCount = 1000;\r\n    const generateLike = () => {\r\n        setLikesCount(Math.round(Math.random() * maxLikesCount));\r\n    };\r\n    useEffect(() => {\r\n        generateLike()\r\n    }, []);\r\n\r\n    return (\r\n        <div className={styles.itemWrapper}>\r\n            <div className={styles.userAndLoginBlock}>\r\n                <MyProfilePhoto/>\r\n            </div>\r\n            <p>\r\n                {props.message}\r\n            </p>\r\n            <div>\r\n                <span>Like: </span>{props.likeCount !== 0 ? props.likeCount : likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}","export const placeholderText = {\r\n    profileAreaText: \"What's new with you?\",\r\n    dialogsAreaText: \"Type a message\"\r\n}\r\nexport const maxMessageLength:number = 500;","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport styles from \"./TextAreaForm.module.scss\";\r\nimport {MyPostsPropsType} from \"../../Profile/MyPosts\";\r\nimport {maxMessageLength} from \"./textAreaData\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\n\r\n\r\nexport const TextAreaForm = React.memo((props: MyPostsPropsType) => {\r\n    type FormikErrorType = {\r\n        text?: string\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            text: \"\",\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if(!values.text){\r\n                errors.text = \"Enter a message\"\r\n            }\r\n            if(values.text.length >= maxMessageLength){\r\n                errors.text = `Max length of message is ${maxMessageLength} symbols.`\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values, {resetForm}) => {\r\n            if (values.text !== \"\")\r\n                props.callBack(values.text)\r\n            resetForm();\r\n        },\r\n\r\n    })\r\n\r\n\r\n    return (\r\n        <form  onSubmit={formik.handleSubmit}>\r\n            <div className={styles.formWrapper}>\r\n                <textarea className={styles.textArea} maxLength={1000}\r\n                         placeholder={props.placeholderText}\r\n                         {...formik.getFieldProps(\"text\")}\r\n                         autoFocus={true} onBlur={() => formik.errors.text = \"\"}\r\n            />\r\n                <div>\r\n                    <Button type={\"submit\"}>Publish</Button>\r\n                </div>\r\n            </div>\r\n            {formik.errors.text &&  <div style={{color: \"red\"}}> {formik.errors.text}</div>}\r\n        </form>\r\n    )\r\n\r\n})","import React from \"react\";\r\nimport {Post} from \"./MyPosts/Post/Post\";\r\nimport styles from \"./MyPosts.module.scss\"\r\nimport {PostType} from \"../OldComponents/OldStore\";\r\nimport { TextAreaForm } from \"../Common/TextAreaForm/TextAreaForm\";\r\n\r\nexport type MyPostsPropsType = {\r\n    postsData?: Array<PostType>\r\n    callBack: (text: string) => void\r\n    placeholderText: string\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    let postsElements = props.postsData?.map(p => <Post key={p.id}\r\n                                                        message={p.message}\r\n                                                        likeCount={p.likesCount}/>).reverse()\r\n    return <div className={styles.postBlock}>\r\n        <h3>My posts</h3>\r\n        <TextAreaForm placeholderText={props.placeholderText} callBack={props.callBack}/>\r\n        <div className={styles.posts}>\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n\r\n})\r\n\r\n","import React from \"react\";\r\nimport styles from \"./Profile.module.scss\"\r\nimport {ProfileInfo} from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport {addPostActionAC} from \"../../Redux/ProfileReducer\";\r\nimport commonStyle from \"../Common/boxStyle.module.scss\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {myUserID} from \"../../Redux/AuthReducer\";\r\nimport {placeholderText} from \"../Common/TextAreaForm/textAreaData\";\r\nimport {postsDataSelector, profileSelector} from \"../Common/Selectors/Selectors\";\r\n\r\ntype ProfilePropsType = {\r\n    userID: number| null\r\n}\r\n\r\nexport const ProfileFC = React.memo((props: ProfilePropsType) => {\r\n    const postsData = useSelector(postsDataSelector);\r\n    const profile = useSelector(profileSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    const addMessage = (text: string) =>{\r\n        return  dispatch(addPostActionAC(text));\r\n    }\r\n    return (\r\n        <div className={`${styles.wrapper} ${commonStyle.mainBox}`}>\r\n            <ProfileInfo profile={profile}/>\r\n            {props.userID === myUserID && <MyPosts placeholderText={placeholderText.profileAreaText}\r\n                                                   callBack={addMessage}\r\n                                                   postsData={postsData}/>}\r\n        </div>)\r\n\r\n})","import React, {FC, useEffect} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getProfileTC, getUserStatusTC} from \"../../Redux/ProfileReducer\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nimport {ProfileFC} from \"./ProfileFC\";\r\nimport {myUserID} from \"../../Redux/AuthReducer\";\r\n\r\n\r\n\r\n\r\nexport const ProfileContainerFC: FC = React.memo(() => {\r\n\r\n    const params = useParams<'userId'>();\r\n    const userId = Number(params.userId); //эта id взялась из компоненты app из роута <Route path={\"/profile/:userId\"}\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (userId !== myUserID){\r\n            dispatch(getProfileTC(userId));\r\n            dispatch(getUserStatusTC(userId));\r\n        }else{\r\n            dispatch(getProfileTC(myUserID));\r\n            dispatch(getUserStatusTC(myUserID));\r\n        }\r\n\r\n    }, [userId, dispatch]);\r\n\r\n\r\n    return <ProfileFC userID={userId}/>\r\n\r\n\r\n})\r\n\r\n\r\n\r\n","import styles from \"../Dialogs.module.scss\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {DialogsStateType} from \"../../../Redux/DialogsReducer\";\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    DialogPage: DialogsStateType\r\n}\r\n\r\nexport function DialogItem(props: DialogItemPropsType) {\r\n\r\n    let dialogItem = props.DialogPage.dialogs.map(m =>\r\n        <div className={styles.dialogItem} key={m.id}>\r\n            <div className={styles.userAvatarAndName}>\r\n                <NavLink\r\n                    to={\"/friendDialog/\" + m.id}>\r\n                    <img src={m.avatar}\r\n                         alt={\"friendAvatar\"}/>\r\n                    {m.name}\r\n                </NavLink>\r\n            </div>\r\n            <div>{m.message}</div>\r\n        </div>\r\n    )\r\n    return (\r\n        <>\r\n            {dialogItem}\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport styles from \"../Dialogs.module.scss\"\r\nimport {MyProfilePhoto} from \"../../Common/MyProfilePhoto/MyProfilePhoto\";\r\n\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport  const Message = React.memo((props: MessageType) =>{\r\n\r\n    return (\r\n        <div className={styles.messagesWrapper}>\r\n            <p className={styles.dialogItem}>{props.message}</p>\r\n            <MyProfilePhoto/>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","import React, {useCallback} from \"react\";\r\nimport styles from \"./Dialogs.module.scss\"\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {addMessageAC, DialogsStateType} from \"../../Redux/DialogsReducer\";\r\nimport {TextAreaForm} from \"../Common/TextAreaForm/TextAreaForm\";\r\nimport {placeholderText} from \"../Common/TextAreaForm/textAreaData\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype DialogsPropsType = {\r\n    DialogPage: DialogsStateType\r\n}\r\n\r\nexport const Dialogs = React.memo((props: DialogsPropsType) => {\r\n    const dispatch = useDispatch();\r\n    const messagesElements = props.DialogPage.messages.map((m) => <Message key={m.id}\r\n                                                                           message={m.message}\r\n                                                                           id={m.id}/>)\r\n    const addMessage = useCallback((text: string) => {\r\n        dispatch(addMessageAC(text));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className={styles.dialogsWrapper}>\r\n            <DialogItem DialogPage={props.DialogPage}/>\r\n            {messagesElements}\r\n            <TextAreaForm callBack={addMessage}\r\n                          placeholderText={placeholderText.dialogsAreaText}/>\r\n        </div>\r\n\r\n\r\n    )\r\n})\r\n","import React, {FC} from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/reduxStore\";\r\nimport {Dialogs} from \"./Dialogs\";\r\n\r\nimport {DialogsStateType} from \"../../Redux/DialogsReducer\";\r\n\r\n\r\n\r\nconst DialogContainerFC: FC = () => {\r\n\r\n    const dialogPage = useSelector<AppRootStateType, DialogsStateType>(state => state.DialogPage);\r\n\r\n    // const Redirect = WithAuthRedirect(Dialogs);\r\n    return (\r\n            /*<Redirect DialogPage={dialogPage}/>*/\r\n        <Dialogs DialogPage={dialogPage}/>\r\n\r\n    );\r\n};\r\n/*compose<React.ComponentType>(\r\n    WithAuthRedirect\r\n)(DialogContainerFC);*/\r\nexport default DialogContainerFC","import React from 'react';\r\n\r\n\r\n\r\nexport function Events(){\r\n    return(\r\n        <div >\r\n            <div>Events</div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport {Events} from \"./Events\";\r\n\r\nexport function EventsContainer(){\r\n   /* const Redirect = WithAuthRedirect(Events);*/\r\n    return(\r\n        <div>\r\n            {/*<Redirect/>*/}\r\n            <Events/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nconst Photos = () => {\r\n    return (\r\n        <div>\r\n            Photos\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Photos;","import React from 'react';\r\nimport styles from \"./Photos.module.scss\";\r\n\r\nimport Photos from \"./Photos\";\r\n\r\n\r\nfunction PhotosContainer() {\r\n    /*const Redirect = WithAuthRedirect(Photos)*/\r\n    return(\r\n        <div className={styles.content}>\r\n            {/*<Redirect/>*/}\r\n            <Photos/>\r\n        </div>\r\n    );\r\n}\r\n/*compose<React.ComponentType>(WithAuthRedirect)(PhotosContainer);*/\r\nexport default PhotosContainer","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../Redux/AuthReducer\";\r\nimport {AppRootStateType} from \"../../Redux/reduxStore\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {setAppErrorAC} from \"../../Redux/AppReducer\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\n\r\ntype FormikErrorType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\nexport const Login = React.memo(() => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.Auth.isLoggedIn);\r\n    const serverError = useSelector<AppRootStateType, string>(state => state.App.error);\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            const errors: Partial<FormikErrorType> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (values.password.length < 3) {\r\n                errors.password = \"Invalid password length\"\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password required\"\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        }\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Navigate to={\"/\"}/>\r\n    }\r\n\r\n    const removeError = () => {\r\n        serverError && dispatch(setAppErrorAC(\"\"));\r\n    }\r\n\r\n    return (\r\n\r\n        <Grid container justifyContent={\"center\"}>\r\n            <Grid item justifyContent={'center'}>\r\n                <h1>Login</h1>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               rel=\"noreferrer\" target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormGroup>\r\n                            <TextField label=\"Email\"\r\n                                       placeholder={\"email\"}\r\n                                       type=\"email\"\r\n                                       margin=\"normal\"\r\n                                       {...formik.getFieldProps(\"email\")} onFocus={removeError}/>\r\n\r\n                            {formik.touched.password && formik.errors.email ?\r\n                                <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n\r\n                            <TextField type={\"password\"}\r\n                                       label=\"Password\"\r\n                                       margin=\"normal\"\r\n                                       placeholder={\"Password\"}\r\n                                       {...formik.getFieldProps(\"password\")}\r\n                                       onFocus={removeError}/>\r\n\r\n                            {formik.touched.password && formik.errors.password ?\r\n                                <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n\r\n\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox/>}\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.getFieldProps(\"rememberMe\").value}\r\n                            />\r\n\r\n\r\n                            {serverError && <div style={{color: \"red\"}}>{serverError}</div>}\r\n\r\n\r\n                            <Button variant={'contained'}\r\n                                    type={\"submit\"}>\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n});\r\n\r\n","import React, {FC, useEffect} from 'react';\r\nimport './App.scss';\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {SideBar} from \"./components/Navbar/SideBar\";\r\nimport {Route, Routes, Navigate} from \"react-router-dom\";\r\nimport {store} from \"./Redux/reduxStore\";\r\nimport UsersContainerFC from './components/Users/UsersContainerFC';\r\nimport {ProfileContainerFC} from \"./components/Profile/ProfileContainerFC\";\r\nimport DialogContainerFC from \"./components/Dialogs/DialogContainerFC\";\r\nimport {EventsContainer} from \"./components/Events/EventsContainer\";\r\nimport PhotosContainer from \"./components/Photos/PhotosContainer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initializeAppTC} from \"./Redux/AuthReducer\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {Preloader} from \"./components/Common/Preloader/Preloader\";\r\nimport {isInitializedSelector, isLoggedInSelector, userIDSelector} from \"./components/Common/Selectors/Selectors\";\r\n\r\n\r\n\r\nconst App: FC = () => {\r\n\r\n    const state = store.getState();\r\n    const dispatch = useDispatch();\r\n    const userID = useSelector(userIDSelector)\r\n    const isLoggedIn = useSelector(isLoggedInSelector);\r\n    const isInitialized = useSelector(isInitializedSelector);\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC());\r\n    }, [dispatch]);\r\n\r\n    if (!isInitialized) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={\"App\"}>\r\n            <Header/>\r\n            {isLoggedIn ? <div className={\"mainContent\"}>\r\n                <SideBar SideBar={state.SideBar}/>\r\n                 <Routes>\r\n                    <Route path={\"/\"} element={<Navigate to={`/profile/${userID}`}/>}/>\r\n                    <Route path={\"/login\"} element={<Login/>}/>\r\n                    <Route path={\"/profile/:userId\"} element={<ProfileContainerFC/>}/>\r\n                    <Route path={\"/profile\"} element={<Navigate to={`/profile/${userID}`}/>}/>\r\n                    <Route path={\"/dialogs\"} element={<DialogContainerFC/>}/>\r\n                    <Route path={\"/events\"} element={<EventsContainer/>}/>\r\n                    <Route path={\"/photos\"} element={<PhotosContainer/>}/>\r\n                    <Route path={\"/users\"} element={<UsersContainerFC/>}/>\r\n                    <Route path={\"/*\"} element={<div>404</div>}/>\r\n                </Routes>\r\n            </div> :<Login/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import './index.scss';\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./App\";\nimport {store} from \"./Redux/reduxStore\";\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\n\n// @ts-ignore\nwindow.store = store\n\n    ReactDOM.render(\n            <Provider store={store}>\n                <HashRouter>\n                    <App/>\n                </HashRouter>\n            </Provider>,\n        document.getElementById('root')\n    );\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"Dialogs_dialogsWrapper__3F0bp\",\"dialogItem\":\"Dialogs_dialogItem__2sb9K\",\"userAvatarAndName\":\"Dialogs_userAvatarAndName__3RqOE\",\"messagesWrapper\":\"Dialogs_messagesWrapper__3fn-w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideWrapper\":\"Navbar_sideWrapper__1dV1_\",\"NavItem\":\"Navbar_NavItem__3u4wb\",\"active\":\"Navbar_active__2IssC\",\"ChatBlock\":\"Navbar_ChatBlock__1-WE4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersWrapper\":\"users_usersWrapper__2NhZI\",\"usersBlock\":\"users_usersBlock__30vL-\",\"avatarAndFollowButton\":\"users_avatarAndFollowButton__3flk2\",\"avatar\":\"users_avatar__3IP3J\",\"nameAndStatus\":\"users_nameAndStatus__nYsqe\",\"status\":\"users_status__2gbbh\",\"name\":\"users_name__3sX1D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileInfo_wrapper__2zQ9G\",\"statusBlock\":\"ProfileInfo_statusBlock__A6KlW\",\"profileName\":\"ProfileInfo_profileName__aXVcE\",\"profileStatus\":\"ProfileInfo_profileStatus__3sbu8\",\"contacts\":\"ProfileInfo_contacts__3rDuc\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__WC_wT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatBlock\":\"ChatBlock_ChatBlock__5ewrq\",\"Title\":\"ChatBlock_Title__YfUmN\",\"imgProfilePhoto\":\"ChatBlock_imgProfilePhoto__dibQ_\",\"OnlineDot\":\"ChatBlock_OnlineDot__2krZz\",\"onlineFriendsWrapper\":\"ChatBlock_onlineFriendsWrapper__14FnN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"Header_headerWrapper__2JC-5\",\"headerContent\":\"Header_headerContent__1KPAQ\",\"loginBlock\":\"Header_loginBlock__1rezt\",\"login\":\"Header_login__2_qsa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__3dKt0\",\"editableDiv\":\"Profile_editableDiv__GFY9u\",\"input\":\"Profile_input__1jMdf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myProfilePhotoWrapper\":\"MyProfilePhoto_myProfilePhotoWrapper__3ZNPd\",\"mySmallPhoto\":\"MyProfilePhoto_mySmallPhoto__v9qAS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemWrapper\":\"Post_itemWrapper__1z8ce\",\"userAndLoginBlock\":\"Post_userAndLoginBlock__2x_uT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__sox7b\",\"posts\":\"MyPosts_posts__2zln9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"TextAreaForm_formWrapper__2lVua\",\"textArea\":\"TextAreaForm_textArea__2ZXO2\"};"],"sourceRoot":""}