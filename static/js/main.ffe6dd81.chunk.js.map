{"version":3,"sources":["components/Common/MyProfilePhoto/MyProfilePhoto.module.scss","components/Common/Preloader/Preloader.module.scss","components/Profile/MyPosts/Post/Post.module.scss","components/Profile/MyPosts.module.scss","components/Common/TextAreaForm/TextAreaForm.module.scss","Redux/DialogsReducer.tsx","components/Common/TextAreaForm/TextAreaForm.tsx","components/Profile/ProdileData/Contacts.module.scss","components/Common/boxStyle.module.scss","components/Common/Selectors/Selectors.ts","components/EditProfile/EditProfile.module.scss","Redux/AppReducer.tsx","components/api.tsx","constants.ts","Redux/AuthReducer.tsx","utils/error.utils.ts","components/Header/TopContainer.tsx","components/Header/Header.tsx","components/Navbar/ChatBlock.tsx","components/Navbar/SideBar.tsx","Redux/UsersReducer.tsx","Redux/NavBarReducer.tsx","Redux/ProfileReducer.tsx","Redux/store.ts","components/Users/Users.tsx","components/Common/Preloader/Preloader.tsx","components/Users/UsersContainerFC.tsx","components/Profile/ProfileStatus.tsx","components/Profile/ProdileData/Contact.tsx","components/Profile/ProdileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts.tsx","components/Profile/ProfileFC.tsx","components/Profile/ProfileContainerFC.tsx","components/Events/Events.tsx","components/Events/EventsContainer.tsx","components/Photos/Photos.tsx","components/Photos/PhotosContainer.tsx","components/Login/Login.tsx","components/HOC/withSuspense.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","components/EditProfile/EditProfile.tsx","App.tsx","index.tsx","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Navbar/Navbar.module.scss","components/Users/users.module.scss","components/Navbar/ChatBlock.module.scss","Images/defaultUserImage.jpg","components/Header/Header.module.scss","components/Profile/Profile.module.scss","components/Common/TextAreaForm/textAreaData.ts","components/Common/MyProfilePhoto/MyProfilePhoto.tsx"],"names":["module","exports","ACTIONS_TYPE","initialState","dialogs","id","v1","name","avatar","message","messages","dialogsReducer","state","action","type","ADD_DIALOG_MESSAGE","text","addMessageAC","TextAreaForm","React","memo","props","formik","useFormik","initialValues","validate","values","errors","length","maxMessageLength","onSubmit","resetForm","callBack","handleSubmit","className","styles","formWrapper","textArea","maxLength","placeholder","placeholderText","getFieldProps","autoFocus","onBlur","style","color","statusSelector","ProfilePage","status","userIDSelector","Auth","data","postsDataSelector","postsData","profileSelector","profile","isLoggedInSelector","isLoggedIn","isInitializedSelector","isInitialized","isFetchingSelector","UsersPage","isFetching","usersSelector","items","pageSizeSelector","pageSize","currentPageSelector","currentPage","totalUserCountSelector","totalCount","followingArrSelector","following","instance","axios","create","withCredentials","baseURL","headers","userAPI","get","profileAPI","userID","put","photoFile","formData","FormData","append","authAPI","post","delete","securityAPI","myUserID","maxPictureSize","Yup","shape","fullName","min","max","required","aboutMe","lookingForAJobDescription","contacts","facebook","value","matches","website","nullable","vk","twitter","instagram","youtube","github","mainLink","url","error","setAppErrorAC","APP_SET_ERROR","setAppStatusAC","APP_SET_STATUS","handleNetworkError","Error","dispatch","response","handleServerAppError","handleServerNetworkError","email","login","captchaUrl","setIsLoggedInAC","SET_IS_LOGGED_IN","getCaptchaAC","captcha","GET_CAPTCHA","getCaptchaTC","a","res","console","log","TopContainer","navigate","useNavigate","useDispatch","useSelector","headerContent","src","alt","loginBlock","MyProfilePhoto","Button","onClick","resultCode","Header","headerWrapper","ChatBlock","chatStyles","onlineFriendsWrapper","imgProfilePhoto","OnlineDot","SideBar","onlineFriends","map","f","to","sideWrapper","NavItem","PATH","PROFILE","isActive","DIALOGS","EVENTS","PHOTOS","USERS","EDIT_PROFILE","Title","sidebarReducer","followSuccessAC","FOLLOW","unFollowSuccessAC","UNFOLLOW","setUsersAC","users","SET_USERS","setUsersTotalCountAC","serverTotalUsersCount","SET_TOTAL_USERS_COUNT","toggleIsFetchingAC","IS_FETCHING","toggleFollowingProgressAC","followingIsProgress","IS_FOLLOWING_PROGRESS","setStatusAC","SET_STATUS","likesCount","userId","lookingForAJob","photos","small","large","getProfileTC","SET_SOME_USER_PROFILE","getUserStatusTC","useAppDispatch","rootReducer","combineReducers","ADD_POST","SAVE_MY_PROFILE_PHOTO","DELETE_POST","filter","DialogPage","u","followed","SET_CURRENT_PAGE","SET_IS_INITIALIZED","SET_AUTH_PROFILE_DATA","App","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","useAppSelector","Users","totalUserCount","onPageChanged","followingInProgress","unfollowTC","followTC","pagesCount","Math","ceil","defaultUserPhoto","userPhoto","usersWrapper","Pagination","onChange","event","page","size","variant","count","data-testid","user","usersBlock","avatarAndFollowButton","disabled","some","nameAndStatus","Preloader","main","progress","CircularProgress","UserContainerFC","followingArr","useEffect","getUsersTC","pageNumber","onPageChangedTC","follow","unfollow","ProfileStatus","Number","useParams","useState","localStatus","setLocalStatus","editMode","setEditMode","activateEditMode","deactivateEditMode","updateUserStatusTC","editableDiv","input","e","currentTarget","onKeyPress","key","Contact","contactTitle","contactValue","s","contact","ProfileData","Object","keys","contactKey","position","top","left","transform","width","bgcolor","boxShadow","p","borderRadius","ProfileInfo","myId","photoRef","useRef","open","setOpen","base64Avatar","setLocalAvatar","fileAvatar","setFileAvatar","handleCloseModal","wrapper","descriptionBlock","img","menu","statusBlock","profileName","profileStatus","Modal","onClose","Box","sx","display","flexDirection","justifyContent","alignItems","fontSize","IconButton","right","Close","marginBottom","htmlFor","ref","accept","reader","FileReader","file","target","files","onloadend","result","readAsDataURL","textTransform","current","click","getState","Post","setLikesCount","round","random","itemWrapper","userAndLoginBlock","likeCount","MyPosts","postsElements","reverse","postBlock","posts","ProfileFC","commonStyle","mainBox","profileAreaText","ProfileContainerFC","LOGIN","Events","EventsContainer","Photos","PhotosContainer","content","Login","serverError","isPassType","setIsPassType","test","password","rememberMe","HOME","Grid","container","item","FormControl","FormLabel","href","rel","FormGroup","mTop","InputLabel","Input","onFocus","touched","endAdornment","InputAdornment","aria-label","onMouseDown","preventDefault","VisibilityOff","Visibility","FormControlLabel","label","control","Checkbox","checked","marginTop","withSuspense","Component","Suspense","fallback","ErrorSnackBar","handleClose","reason","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Alert","severity","AlertTitle","EditProfile","enableReinitialize","updateProfileTC","formRow","contactText","TextField","background","handleChange","handleBlur","helperText","multiline","labelPlacement","button","DialogContainerFC","lazy","ERROR404","ANY_ROUTE","appStatus","profileData","path","element","UsersContainerFC","ReactDOM","render","document","getElementById","dialogsAreaText","myPhoto","myLoginName","myProfilePhotoWrapper","mySmallPhoto","userName"],"mappings":"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","file":"static/js/main.ffe6dd81.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"myProfilePhotoWrapper\":\"MyProfilePhoto_myProfilePhotoWrapper__3ZNPd\",\"mySmallPhoto\":\"MyProfilePhoto_mySmallPhoto__v9qAS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Preloader_main__2BYGT\",\"progress\":\"Preloader_progress__Q1DsD\",\"scaling\":\"Preloader_scaling__13g5_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemWrapper\":\"Post_itemWrapper__1z8ce\",\"userAndLoginBlock\":\"Post_userAndLoginBlock__2x_uT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__sox7b\",\"posts\":\"MyPosts_posts__2zln9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"TextAreaForm_formWrapper__2lVua\",\"textArea\":\"TextAreaForm_textArea__2ZXO2\"};","import {v1} from \"uuid\";\r\n\r\n\r\n\r\n\r\n//types\r\nexport type MessagesType = {\r\n    id: string\r\n    message: string\r\n}\r\nexport enum ACTIONS_TYPE {\r\n    ADD_DIALOG_MESSAGE = \"DIALOGS/ADD-DIALOG-MESSAGE\",\r\n}\r\nexport type DialogActionsType = ReturnType<typeof addMessageAC>\r\nexport type DialogsType = {\r\n    id: string\r\n    name: string\r\n    avatar: string\r\n    message: string\r\n}\r\nexport type DialogsStateType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\nconst initialState: DialogsStateType = {\r\n\r\n    dialogs: [\r\n        {\r\n            id: v1(),\r\n            name: \"Boris Jonson\",\r\n            avatar: \"https://themified.com/friend-finder/images/users/user-4.jpg\",\r\n            message: \"What is the weather forecast for tomorrow?\"\r\n        },\r\n\r\n    ],\r\n    messages: [\r\n        {id: v1(), message: \"Looks like it will be sunny tomorrow=)\"}\r\n    ]\r\n}\r\n//reducer\r\nexport const dialogsReducer = (state: DialogsStateType = initialState, action: DialogActionsType): DialogsStateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.ADD_DIALOG_MESSAGE: {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: v1(), message: action.text}]\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n//action creators\r\nexport const addMessageAC = (text: string) => ({type: ACTIONS_TYPE.ADD_DIALOG_MESSAGE, text} as const)\r\n\r\n","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport styles from \"./TextAreaForm.module.scss\";\r\nimport {MyPostsPropsType} from \"../../Profile/MyPosts\";\r\nimport {maxMessageLength} from \"./textAreaData\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\n\r\n\r\nexport const TextAreaForm = React.memo((props: MyPostsPropsType) => {\r\n    type FormikErrorType = {\r\n        text?: string\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            text: \"\",\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if(!values.text){\r\n                errors.text = \"Enter a message\"\r\n            }\r\n            if(values.text.length >= maxMessageLength){\r\n                errors.text = `Max length of message is ${maxMessageLength} symbols.`\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values, {resetForm}) => {\r\n            if (values.text !== \"\")\r\n                props.callBack(values.text)\r\n            resetForm();\r\n        },\r\n\r\n    })\r\n\r\n\r\n    return (\r\n        <form  onSubmit={formik.handleSubmit}>\r\n            <div className={styles.formWrapper}>\r\n                <textarea className={styles.textArea} maxLength={1000}\r\n                         placeholder={props.placeholderText}\r\n                         {...formik.getFieldProps(\"text\")}\r\n                         autoFocus={true} onBlur={() => formik.errors.text = \"\"}\r\n            />\r\n                <div>\r\n                    <Button type={\"submit\"}>Publish</Button>\r\n                </div>\r\n            </div>\r\n            {formik.errors.text &&  <div style={{color: \"red\"}}> {formik.errors.text}</div>}\r\n        </form>\r\n    )\r\n\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"Contacts_contact__1RKRn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBox\":\"boxStyle_mainBox__24wr7\"};","import {AppRootStateType} from \"../../../Redux/store\";\r\nimport {UserType} from \"../../../Redux/UsersReducer\";\r\nimport {PostType, ProfileDataType} from \"../../../Redux/ProfileReducer\";\r\n\r\nexport const statusSelector = (state:AppRootStateType):string =>{\r\n    return state.ProfilePage.status;\r\n}\r\nexport const userIDSelector = (state:AppRootStateType):number =>{\r\n    return state.Auth.data.id;\r\n}\r\nexport const postsDataSelector = (state:AppRootStateType):Array<PostType> =>{\r\n    return state.ProfilePage.postsData;\r\n}\r\nexport const profileSelector = (state:AppRootStateType):ProfileDataType =>{\r\n    return state.ProfilePage.profile;\r\n}\r\nexport const isLoggedInSelector = (state:AppRootStateType):boolean =>{\r\n    return state.Auth.isLoggedIn;\r\n}\r\nexport const isInitializedSelector = (state:AppRootStateType):boolean =>{\r\n    return state.Auth.isInitialized;\r\n}\r\nexport const isFetchingSelector = (state:AppRootStateType):boolean =>{\r\n    return state.UsersPage.isFetching;\r\n}\r\nexport const usersSelector = (state:AppRootStateType):UserType[] =>{\r\n    return state.UsersPage.items;\r\n}\r\nexport const pageSizeSelector = (state:AppRootStateType):number =>{\r\n    return state.UsersPage.pageSize;\r\n}\r\nexport const currentPageSelector = (state:AppRootStateType):number =>{\r\n    return state.UsersPage.currentPage;\r\n}\r\nexport const totalUserCountSelector = (state:AppRootStateType):number =>{\r\n    return state.UsersPage.totalCount;\r\n}\r\nexport const followingArrSelector = (state:AppRootStateType):Array<string> =>{\r\n    return state.UsersPage.following;\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"EditProfile_wrapper__rOooJ\",\"content\":\"EditProfile_content___ZHRn\",\"formRow\":\"EditProfile_formRow__nKvXR\",\"contactText\":\"EditProfile_contactText___RyRo\",\"checkBoxLabel\":\"EditProfile_checkBoxLabel__3Yx_B\",\"button\":\"EditProfile_button__1wtrb\"};","\r\n\r\n//types\r\nexport type NullableType<T> = null | T\r\nexport enum ACTIONS_TYPE {\r\n    APP_SET_ERROR = \"APP-SET-ERROR\",\r\n    APP_SET_STATUS = \"APP/SET-STATUS\"\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type AppActionsType = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC>\r\n\r\ntype InitialStateType = typeof initialState\r\nconst initialState = {\r\n    error: null as NullableType<string>,\r\n    status: \"idle\" as RequestStatusType,\r\n}\r\n\r\n//reducer\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.APP_SET_ERROR:\r\n            return {...state, error: action.error}\r\n        case ACTIONS_TYPE.APP_SET_STATUS:\r\n            return {...state, status: action.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action creators\r\nexport const setAppErrorAC = (error: NullableType<string>) => ({type: ACTIONS_TYPE.APP_SET_ERROR, error} as const);\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: ACTIONS_TYPE.APP_SET_STATUS, status} as const);\r\n\r\n\r\n\r\n\r\n\r\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {UsersPageType} from \"../Redux/UsersReducer\";\r\nimport {ProfileDataType} from \"../Redux/ProfileReducer\";\r\nimport {LoginParamsType} from \"../Redux/AuthReducer\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"c3728aab-6f62-411f-9e90-c03d8ff7b899\",\r\n    }\r\n})\r\nexport type AuthDataType = {\r\n    id:number,\r\n    email: string\r\n    login:string\r\n}\r\nexport type RespType<T = {}> = {\r\n    resultCode: 0\r\n    data: T\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n}\r\nexport const userAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<UsersPageType>(`users?page=${currentPage}&count=${pageSize}`);\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userID: number | null) {\r\n        return instance.get<ProfileDataType>(`profile/${userID}`);\r\n    },\r\n    getStatus(userID: number | null) {\r\n        return instance.get<AxiosResponse<RespType>, any>(`profile/status/${userID}`);\r\n    },\r\n    updateStatus(status: string | null) {\r\n\r\n        return instance.put<AxiosResponse<RespType>,any>(`profile/status`, {status})\r\n    },\r\n    uploadAvatar(photoFile:File){\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<RespType<{photos:{small:\"\", large:\"\"}}>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    updateProfile(profile: ProfileDataType){\r\n        return instance.put<AxiosResponse<RespType>,any>(`profile`, {...profile})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<RespType<AuthDataType>>(`auth/me`);\r\n    },\r\n    follow(userID: string | undefined) {\r\n        return instance.post<RespType<AuthDataType>>(`follow/${userID}`);\r\n    },\r\n    unfollow(userID: string | undefined) {\r\n        return instance.delete<RespType<AuthDataType>>(`follow/${userID}`);\r\n    },\r\n    login(data: LoginParamsType){\r\n        return instance.post<RespType<AuthDataType>>(`auth/login`, data);\r\n    },\r\n    logout(){\r\n        return instance.delete<RespType>('/auth/login');\r\n    }\r\n\r\n}\r\nexport const securityAPI = {\r\n    captcha(){\r\n        return instance.get<{url:string| null}>(`/security/get-captcha-url`)\r\n    }\r\n}\r\n","import * as Yup from \"yup\";\r\n\r\nexport const freeUserId = 1079;\r\nexport const myUserID = 21748;\r\nexport const maxPictureSize = 10000000; //10MB\r\nconst webSiteRegular =  /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/;\r\n\r\nexport const DisplayingErrorMessagesSchema = Yup.object().shape({\r\n    fullName: Yup.string()\r\n        .min(3, 'User name must be more than 3 symbols')\r\n        .max(50, 'User name must be less than 50 symbols')\r\n        .required('Required'),\r\n    aboutMe: Yup.string()\r\n        .min(3, 'User description text must be more than 3 symbols')\r\n        .max(300, 'User description text must be less than 300 symbols')\r\n        .required('Required'),\r\n    lookingForAJobDescription: Yup.string()\r\n        .min(3, 'Job description text must be more than 3 symbols')\r\n        .max(300, 'Job description text must be less than 300 symbols')\r\n        .required('Required'),\r\n    contacts: Yup.object().shape({\r\n        facebook: Yup.lazy(value => !value ? Yup.string() : Yup.string().matches(\r\n            /(?:https:\\/\\/)?(?:www\\.)?facebook\\.com\\/(?:(?:\\w)*#!\\/)?(?:pages\\/)?(?:[\\w]*\\/)*([\\w]*)/,\r\n            'Please enter correct url'\r\n        )),\r\n        website: Yup.string()\r\n            .min(0)\r\n            .nullable()\r\n            .matches(\r\n                webSiteRegular,\r\n                'Please enter correct url'\r\n            ),\r\n        vk: Yup.string()\r\n\r\n            .matches(\r\n                /(?:https:\\/\\/)?[-a-zA-Z0-9@:%_+.~#?&=]{2,256}\\.[a-z]{2,4}\\b([-a-zA-Z0-9@:%_+.~#?&=]*)?/gi,\r\n                'Please enter correct vk url'\r\n            ),\r\n        twitter: Yup.string()\r\n            .min(0)\r\n            .nullable(true)\r\n            .matches(\r\n                /@([A-Za-z0-9_]{1,15})/,\r\n                'Please enter correct twitter url'\r\n            )\r\n            ,\r\n        instagram: Yup.string()\r\n            .min(0)\r\n            .nullable(true)\r\n            .matches(\r\n                /(?:(?:http|https):\\/\\/)?(?:www.)?(?:instagram.com|instagr.am|instagr.com)\\/(\\w+)/igm,\r\n                'Please enter correct instagram url'\r\n            )\r\n            ,\r\n        youtube: Yup.string()\r\n            .min(0)\r\n            .nullable(true)\r\n            .matches(\r\n                /youtu(?:.*\\/v\\/|.*v\\|\\.be\\/)([A-Za-z0-9_-]{11})/,\r\n                'Please enter correct YouTube url'\r\n            )\r\n            ,\r\n        github: Yup.string()\r\n            .min(0)\r\n            .nullable(true)\r\n            .matches(\r\n                /(?:(?:http|https):\\/\\/)?(?:www.)?(?:github.com)\\/(\\w+)/igm,\r\n                'Please enter correct github url'\r\n            )\r\n            ,\r\n        mainLink: Yup.string()\r\n            .min(0)\r\n            .nullable(true)\r\n            .url(),\r\n\r\n    }),\r\n\r\n\r\n});","import {authAPI, AuthDataType, securityAPI} from \"../components/api\";\r\nimport {AppThunkDispatch} from \"./store\";\r\nimport {myUserID} from \"../constants\";\r\nimport {handleNetworkError, handleServerAppError, handleServerNetworkError} from \"../utils/error.utils\";\r\nimport {setAppStatusAC} from \"./AppReducer\";\r\n\r\n\r\n//types\r\nexport enum ACTIONS_TYPE {\r\n    SET_IS_LOGGED_IN = \"AUTH/SET-IS-LOGGED-IN\",\r\n    SET_IS_INITIALIZED = \"AUTH/SET-IS-INITIALIZED\",\r\n    SET_AUTH_PROFILE_DATA = \"AUTH/SET-AUTH-PROFILE-DATA\",\r\n    GET_CAPTCHA = \"AUTH/GET-CAPTCHA\"\r\n}\r\n\r\nexport type AuthActionsType =\r\n    ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setInitializedAC>\r\n    | ReturnType<typeof setAuthProfileAC>\r\n    | ReturnType<typeof getCaptchaAC>\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n}\r\n\r\ntype InitialStateType = {\r\n    data: AuthDataType,\r\n    isInitialized: boolean\r\n    isLoggedIn: boolean,\r\n    captchaUrl: null | string\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    data: {\r\n        id: myUserID,\r\n        email: \"\",\r\n        login: \"\",\r\n\r\n    },\r\n    isInitialized: false,\r\n    isLoggedIn: false,\r\n    captchaUrl: null\r\n}\r\n\r\n//reducer\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case ACTIONS_TYPE.SET_IS_LOGGED_IN:\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        case ACTIONS_TYPE.SET_IS_INITIALIZED:\r\n            return {...state, isInitialized: action.isInitialized}\r\n        case ACTIONS_TYPE.SET_AUTH_PROFILE_DATA:\r\n            return {...state, data: action.data}\r\n        case ACTIONS_TYPE.GET_CAPTCHA:\r\n            return {...state, captchaUrl: action.captcha}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action creators\r\nexport const setIsLoggedInAC = (isLoggedIn: boolean) =>\r\n    ({type: ACTIONS_TYPE.SET_IS_LOGGED_IN, isLoggedIn} as const);\r\n\r\nexport const setInitializedAC = (isInitialized: boolean) =>\r\n    ({type: ACTIONS_TYPE.SET_IS_INITIALIZED, isInitialized} as const);\r\n\r\nexport const setAuthProfileAC = (profileData: AuthDataType) =>\r\n    ({type: ACTIONS_TYPE.SET_AUTH_PROFILE_DATA, data: profileData} as const);\r\nexport const getCaptchaAC = (captcha : string| null) =>\r\n    ({type: ACTIONS_TYPE.GET_CAPTCHA, captcha} as const);\r\n\r\n\r\n\r\n//thunks\r\nexport const initializeAppTC = () => async (dispatch: AppThunkDispatch) => {\r\n\r\n    let res = await authAPI.me();\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(setAuthProfileAC(res.data.data));\r\n        }\r\n        else {\r\n            dispatch(setAppStatusAC(\"failed\"));\r\n        }\r\n    } catch (error: any) {\r\n        console.log(\"Error when you try initialize app\", error)\r\n        handleNetworkError(error, dispatch);\r\n    } finally {\r\n        dispatch(setInitializedAC(true));\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const loginTC = (data: LoginParamsType) => async (dispatch: AppThunkDispatch) => {\r\n\r\n    let res = await authAPI.login(data);\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(getCaptchaAC(null))\r\n        } else {\r\n            if(res.data.resultCode === 10){\r\n                dispatch(await getCaptchaTC())\r\n            }\r\n                handleServerAppError(res.data, dispatch);\r\n        }\r\n    } catch (error: any) {\r\n        console.log(\"Error when you try to login\", error)\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n\r\n\r\n}\r\nexport const logOutTC = () => async (dispatch: AppThunkDispatch) => {\r\n    let res = await authAPI.logout();\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(false));\r\n        }\r\n        else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    } catch (error: any) {\r\n        console.log(\"Error when you try to logout\", error)\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\nexport const getCaptchaTC = () => async (dispatch: AppThunkDispatch) => {\r\n    let res = await securityAPI.captcha();\r\n    try{\r\n\r\n        dispatch(getCaptchaAC(res.data.url))\r\n    }\r\n    catch (error: any) {\r\n        console.log(\"Error when you try to logout\", error)\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n","import {AxiosError} from \"axios\";\r\nimport {AppThunkDispatch} from \"../Redux/store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../Redux/AppReducer\";\r\nimport {RespType} from \"../components/api\";\r\n\r\n\r\nexport const handleNetworkError = (Error: AxiosError<{ error: string }>, dispatch: AppThunkDispatch) =>{\r\n\r\n    dispatch(setAppStatusAC(\"failed\"));\r\n    dispatch(setAppErrorAC(Error.response?.data.error || \"some Error\"));\r\n}\r\n\r\n\r\nexport const handleServerAppError = <D>(data: RespType<D>, dispatch: AppThunkDispatch, ) =>{\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]));\r\n    } else {\r\n        dispatch(setAppErrorAC(\"Some error occupied\"));\r\n    }\r\n    dispatch(setAppStatusAC(\"failed\"));\r\n\r\n}\r\nexport const handleServerNetworkError = (error:Error, dispatch:AppThunkDispatch) =>{\r\n    dispatch(setAppErrorAC(error.message));\r\n    dispatch(setAppStatusAC(\"failed\"));\r\n\r\n}\r\n","import React from 'react';\r\nimport styles from \"./Header.module.scss\"\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logOutTC} from \"../../Redux/AuthReducer\";\r\nimport {MyProfilePhoto} from \"../Common/MyProfilePhoto/MyProfilePhoto\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {isLoggedInSelector} from \"../Common/Selectors/Selectors\";\r\n\r\n\r\nexport function TopContainer() {\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector(isLoggedInSelector);\r\n\r\n    const logOutHandler = () => {\r\n        dispatch(logOutTC());\r\n        navigate(\"/login\")\r\n    }\r\n\r\n    return (\r\n        <div className={styles.headerContent}>\r\n            <img src={\"https://templates.envytheme.com/zust/default/assets/images/logo.png\"} alt=\"logo\"/>\r\n            <div className={styles.loginBlock}>\r\n                {isLoggedIn && <MyProfilePhoto/>}\r\n                {isLoggedIn && <Button className={styles.login} onClick={logOutHandler}>\r\n                    Log out\r\n                </Button>}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport styles from \"./Header.module.scss\"\r\nimport {TopContainer} from \"./TopContainer\";\r\n\r\n\r\n\r\nexport function Header(){\r\n\r\n    return(\r\n            <header className={styles.headerWrapper}>\r\n                <TopContainer/>\r\n            </header>\r\n\r\n    )\r\n}","import {OnlineFriendType} from \"../OldComponents/OldStore\";\r\nimport React from \"react\";\r\nimport chatStyles from \"./ChatBlock.module.scss\"\r\n\r\nexport function ChatBlock(props: OnlineFriendType) {\r\n\r\n    return (\r\n            <div className={chatStyles.onlineFriendsWrapper}>\r\n                <img className={chatStyles.imgProfilePhoto} src={props.avatar} alt={\"onlineFriendAvatar\"}/>\r\n                <span className={chatStyles.OnlineDot}/>\r\n            </div>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport style from \"./Navbar.module.scss\"\r\nimport chatStyles from \"./ChatBlock.module.scss\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {SideBarType} from \"../OldComponents/OldStore\";\r\nimport {ChatBlock} from \"./ChatBlock\";\r\nimport {myUserID} from \"../../constants\";\r\nimport {PATH} from \"../../App\";\r\n\r\n\r\ntype NavBarPropsType = {\r\n    SideBar: SideBarType,\r\n}\r\n\r\nexport function SideBar(props: NavBarPropsType) {\r\n\r\n    let onlineFriends = props.SideBar.onlineFriends.map((f) =>\r\n        <NavLink key={f.id} to={\"/friends\" + f.id}>\r\n            <ChatBlock\r\n                       id={f.id}\r\n                       avatar={f.avatar}/>\r\n        </NavLink>)\r\n    return (\r\n        <aside className={style.sideWrapper}>\r\n            <div className={style.NavItem}>\r\n                <NavLink  to={`${PATH.PROFILE}/${myUserID}`} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Profile</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={PATH.DIALOGS} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Messages</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={PATH.EVENTS} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Events</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={PATH.PHOTOS} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Photos</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={PATH.USERS} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Find Friends</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={PATH.EDIT_PROFILE} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Settings</NavLink>\r\n            </div>\r\n\r\n            <div className={chatStyles.ChatBlock}>\r\n                <span className={chatStyles.Title}>Chat online</span>\r\n                {onlineFriends}\r\n            </div>\r\n        </aside>\r\n    )\r\n}\r\n\r\n","import {authAPI, userAPI} from \"../components/api\";\r\nimport {handleNetworkError, handleServerNetworkError} from \"../utils/error.utils\";\r\nimport {AppThunkDispatch} from \"./store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"./AppReducer\";\r\n\r\n//types\r\nexport enum ACTIONS_TYPE {\r\n    FOLLOW = \"USERS/FOLLOW\",\r\n    UNFOLLOW = \"USERS/UNFOLLOW\",\r\n    SET_USERS = \"USERS/SET-USERS\",\r\n    SET_CURRENT_PAGE = \"USERS/SET-CURRENT-PAGE\",\r\n    SET_TOTAL_USERS_COUNT = \"USERS/SET-TOTAL-USERS-COUNT\",\r\n    IS_FETCHING = \"USERS/IS-FETCHING\",\r\n    IS_FOLLOWING_PROGRESS = \"USERS/IS-FOLLOWING-PROGRESS\"\r\n}\r\n\r\nexport type UsersActionsType =\r\n    ReturnType<typeof followSuccessAC> |\r\n    ReturnType<typeof unFollowSuccessAC> |\r\n    ReturnType<typeof setUsersAC> |\r\n    ReturnType<typeof setCurrentPageAC> |\r\n    ReturnType<typeof setUsersTotalCountAC> |\r\n    ReturnType<typeof toggleIsFetchingAC>|\r\n    ReturnType < typeof toggleFollowingProgressAC>\r\n\r\n\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type UserType = {\r\n    id: string,\r\n    name: string\r\n    status: string\r\n    followed: boolean\r\n    photos: PhotosType\r\n}\r\nexport type UsersPageType = {\r\n    items: UserType[]\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    following: Array<string>\r\n}\r\n\r\n\r\nconst initialState: UsersPageType = {\r\n    items: [],\r\n    pageSize: 7,\r\n    totalCount: 1,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    following: [],\r\n}\r\nexport const userReducer = (state: UsersPageType = initialState, action: UsersActionsType): UsersPageType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.FOLLOW:\r\n            return {...state, items: state.items.map(u => u.id === action.userID ? {...u, followed: true} : u)}\r\n        case ACTIONS_TYPE.UNFOLLOW:\r\n            return {...state, items: state.items.map(u => u.id === action.userID ? {...u, followed: false} : u)}\r\n        case ACTIONS_TYPE.SET_USERS:\r\n            return {...state, items: action.users}\r\n        case ACTIONS_TYPE.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case ACTIONS_TYPE.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalCount: action.totalCount}\r\n        case ACTIONS_TYPE.IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case ACTIONS_TYPE.IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                following: action.followingIsProgress\r\n                    ? [...state.following, action.userID]\r\n                    : state.following.filter(id => id !== action.userID)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const followSuccessAC = (userID: string) => ({type: ACTIONS_TYPE.FOLLOW, userID: userID} as const)\r\nexport const unFollowSuccessAC = (userID: string) => ({type: ACTIONS_TYPE.UNFOLLOW, userID: userID} as const)\r\nexport const setUsersAC = (users: UserType[]) => ({type: ACTIONS_TYPE.SET_USERS, users: users} as const)\r\nexport const setCurrentPageAC = (currentPage: number) => ({\r\n    type: ACTIONS_TYPE.SET_CURRENT_PAGE,\r\n    currentPage: currentPage,\r\n} as const)\r\nexport const setUsersTotalCountAC = (serverTotalUsersCount: number) => ({\r\n    type: ACTIONS_TYPE.SET_TOTAL_USERS_COUNT,\r\n    totalCount: serverTotalUsersCount\r\n} as const)\r\nexport const toggleIsFetchingAC = (isFetching: boolean) => ({\r\n    type: ACTIONS_TYPE.IS_FETCHING,\r\n    isFetching: isFetching,\r\n} as const)\r\nexport const toggleFollowingProgressAC = (followingIsProgress: boolean, userID: string) => ({\r\n    type: ACTIONS_TYPE.IS_FOLLOWING_PROGRESS,\r\n    followingIsProgress: followingIsProgress,\r\n    userID: userID,\r\n} as const)\r\n\r\n//thunks\r\nexport const getUsersTC = (currentPage: number, pageSize: number) => async (dispatch: AppThunkDispatch) => {\r\n    dispatch(toggleIsFetchingAC(true));\r\n    let res = await userAPI.getUsers(currentPage, pageSize)\r\n    try {\r\n        dispatch(toggleIsFetchingAC(false));\r\n        dispatch(setUsersAC(res.data.items));\r\n        dispatch(setUsersTotalCountAC(res.data.totalCount));\r\n    } catch (error: any) {\r\n        console.log(\"Error when you try get users\", error)\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\nexport const onPageChangedTC = (pageSize: number, pageNumber: number) => async (dispatch: AppThunkDispatch) => {\r\n    dispatch(toggleIsFetchingAC(true));\r\n    dispatch(setCurrentPageAC(pageNumber));\r\n    let res = await userAPI.getUsers(pageNumber, pageSize)\r\n    try {\r\n        dispatch(setUsersAC(res.data.items));\r\n        dispatch(setUsersTotalCountAC(res.data.totalCount));\r\n        dispatch(toggleIsFetchingAC(false));\r\n    } catch (error: any) {\r\n        console.log(\"Error when you try change page\", error)\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const follow = (userID: string) => async (dispatch: AppThunkDispatch) => {\r\n    dispatch(toggleFollowingProgressAC(true, userID));\r\n\r\n    let response = await authAPI.follow(userID)\r\n    try {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(followSuccessAC(userID));\r\n        } else{\r\n            dispatch(setAppErrorAC(\"Some error occupied\"));\r\n            dispatch(setAppStatusAC(\"failed\"));\r\n        }\r\n        dispatch(toggleFollowingProgressAC(false, userID));\r\n    } catch (error: any) {\r\n        console.log(\"Error when you try follow user\", error)\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const unfollow = (userID: string) => async (dispatch: AppThunkDispatch) => {\r\n    dispatch(toggleFollowingProgressAC(true, userID));\r\n    let response = await authAPI.unfollow(userID);\r\n    try {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(unFollowSuccessAC(userID));\r\n        }\r\n        dispatch(toggleFollowingProgressAC(false, userID));\r\n    } catch (error: any) {\r\n        handleNetworkError(error, dispatch);\r\n    }\r\n}\r\n\r\n","import {SideBarType} from \"../components/OldComponents/OldStore\";\r\nimport {v1} from \"uuid\";\r\n\r\nlet initialState: SideBarType = {\r\n    onlineFriends: [\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-4.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-3.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-6.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-2.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-7.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-10.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-9.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-5.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-8.jpg\"},\r\n    ],\r\n}\r\nconst sidebarReducer = (state: SideBarType = initialState) => {\r\n    return state\r\n}\r\nexport default sidebarReducer;","import {v1} from \"uuid\";\r\nimport {profileAPI} from \"../components/api\";\r\nimport {AppStoreType, AppThunkDispatch} from \"./store\";\r\nimport {setAppStatusAC} from \"./AppReducer\";\r\nimport {handleNetworkError, handleServerAppError, handleServerNetworkError} from \"../utils/error.utils\";\r\n\r\n//types\r\nexport enum ACTIONS_TYPE {\r\n    SET_PROFILE = \"PROFILE/SET-PROFILE\",\r\n    ADD_POST = \"PROFILE/ADD-POST\",\r\n    SAVE_MY_PROFILE_PHOTO = \"PROFILE/SAVE-MY-PROFILE_PHOTO\",\r\n    UPDATE_NEW_POST_TEXT = \"PROFILE/UPDATE-NEW-POST-TEXT\",\r\n    SET_SOME_USER_PROFILE = \"PROFILE/SET-SOME-USER-PROFILE\",\r\n    SET_STATUS = \"PROFILE/SET-STATUS\",\r\n    DELETE_POST = \"PROFILE/DELETE-POST\",\r\n\r\n}\r\n\r\nexport type ProfileActionsType =\r\n    ReturnType<typeof addPostActionAC>\r\n    | ReturnType<typeof updateNewPostTextAC>\r\n    | ReturnType<typeof setUserProfileAC>\r\n    | ReturnType<typeof savePhotoAC>\r\n    | ReturnType<typeof setStatusAC>\r\n    | ReturnType<typeof deletePostAC>\r\n\r\n\r\nexport type PostTextType = {\r\n    text: string\r\n}\r\nexport type ProfilePageType = {\r\n    postsData: Array<PostType>\r\n    profile: ProfileDataType\r\n    status: string\r\n}\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type UserProfileContactType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\nexport type userProfilePhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ProfileDataType = {\r\n    userId: number,\r\n    AboutMe?: string\r\n    aboutMe?: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription?: string\r\n    LookingForAJobDescription?: string\r\n    fullName?: string\r\n    FullName?: string\r\n    contacts: UserProfileContactType\r\n    photos?: userProfilePhotosType\r\n\r\n}\r\n\r\n//actions\r\nexport const addPostActionAC = (data: string) => ({type: ACTIONS_TYPE.ADD_POST, data} as const)\r\nexport const updateNewPostTextAC = (text: PostTextType) => ({type: ACTIONS_TYPE.UPDATE_NEW_POST_TEXT, text} as const)\r\nexport const setUserProfileAC = (profile: ProfileDataType) => ({\r\n    type: ACTIONS_TYPE.SET_SOME_USER_PROFILE,\r\n    profile\r\n} as const);\r\nexport const savePhotoAC = (photos: userProfilePhotosType) => ({\r\n    type: ACTIONS_TYPE.SAVE_MY_PROFILE_PHOTO,\r\n    photos\r\n} as const);\r\nexport const setStatusAC = (status: string) => ({type: ACTIONS_TYPE.SET_STATUS, status} as const);\r\nexport const deletePostAC = (id: string) => ({type: ACTIONS_TYPE.DELETE_POST, id} as const);\r\n\r\n\r\nconst initialState: ProfilePageType = {\r\n\r\n    postsData: [\r\n        {id: v1(), message: \"Do you have a job for me? What if I find it?\", likesCount: 0},\r\n        {id: v1(), message: \"I want to be a serious frontend developer.\", likesCount: 0},\r\n        {id: v1(), message: \"What is the good weather today,isn't it?\", likesCount: 0},\r\n    ],\r\n    status: \"\",\r\n\r\n    profile: {\r\n        userId: 0,\r\n        fullName: \"\",\r\n        lookingForAJob: true,\r\n        lookingForAJobDescription: \"\",\r\n        aboutMe: \"\",\r\n        contacts: {\r\n            facebook: \"\",\r\n            github: \"\",\r\n            instagram: \"\",\r\n            mainLink: \"\",\r\n            twitter: \"\",\r\n            vk: \"\",\r\n            website: \"\",\r\n            youtube: \"\",\r\n        },\r\n        photos:\r\n            {\r\n                small: \"\",\r\n                large: \"\",\r\n            }\r\n    }\r\n}\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ProfileActionsType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.ADD_POST:\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, {id: v1(), message: action.data, likesCount: 0}]\r\n            };\r\n        case ACTIONS_TYPE.SET_SOME_USER_PROFILE:\r\n            return {...state, profile: action.profile}\r\n        case ACTIONS_TYPE.SET_STATUS:\r\n            return {...state, status: action.status}\r\n        case ACTIONS_TYPE.SAVE_MY_PROFILE_PHOTO:\r\n            return {...state, profile: {...state.profile, photos: action.photos}}\r\n        case ACTIONS_TYPE.DELETE_POST:\r\n            return {...state, postsData: state.postsData.filter(post => post.id !== action.id)}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n//thunks\r\nexport const getProfileTC = (userId: number | null) => async (dispatch: AppThunkDispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    let res = await profileAPI.getProfile(userId);\r\n    try {\r\n        dispatch(setUserProfileAC(res.data));\r\n        dispatch(setAppStatusAC(\"succeeded\"));\r\n    } catch (error: any) {\r\n        handleNetworkError(error, dispatch);\r\n    }\r\n\r\n}\r\n\r\nexport const getUserStatusTC = (userId: number | null) => async (dispatch: AppThunkDispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    let res = await profileAPI.getStatus(userId);\r\n    try {\r\n        if (res.status === 200) {\r\n            dispatch(setStatusAC(res.data));\r\n            dispatch(setAppStatusAC(\"succeeded\"));\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    } catch (error: any) {\r\n        console.log(\"Error when you try get user status\", error)\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n\r\n}\r\n\r\nexport const updateUserStatusTC = (status: string) => async (dispatch: AppThunkDispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    let res = await profileAPI.updateStatus(status)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setStatusAC(status))\r\n            dispatch(setAppStatusAC(\"succeeded\"));\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    } catch (error: any) {\r\n        console.log(\"Error when you try update user status\", error)\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\nexport const uploadAvatarTC = (photoFile: File) => async (dispatch: AppThunkDispatch, getState: () => AppStoreType) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    const userId = getState().Auth.data.id;\r\n    let res = await profileAPI.uploadAvatar(photoFile)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC(\"succeeded\"));\r\n            dispatch(await getProfileTC(userId))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    } catch (error: any) {\r\n        console.log(\"Error when you try upload avatar\", error)\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n\r\n}\r\nexport const updateProfileTC = (profile: ProfileDataType) => async (dispatch: AppThunkDispatch, getState: () => AppStoreType) => {\r\n\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    let res = await profileAPI.updateProfile(profile)\r\n    const userId = getState().Auth.data.id;\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(await getProfileTC(userId))\r\n            dispatch(setAppStatusAC(\"succeeded\"));\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    } catch (error: any) {\r\n        console.log(\"Error when you try update profile\", error)\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\n\r\n\r\nimport sidebarReducer from \"./NavBarReducer\";\r\nimport {UsersActionsType, userReducer} from \"./UsersReducer\";\r\nimport {AuthActionsType, authReducer} from \"./AuthReducer\";\r\nimport thunkMiddleware, {ThunkDispatch} from 'redux-thunk'\r\nimport {appReducer, AppActionsType} from \"./AppReducer\";\r\nimport {ProfileActionsType, profileReducer} from \"./ProfileReducer\";\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport {dialogsReducer} from \"./DialogsReducer\";\r\n\r\n\r\n\r\n\r\nexport type AppRootStateType = ReturnType <typeof rootReducer>\r\nexport type RootActionsType = AuthActionsType | AppActionsType | ProfileActionsType | UsersActionsType\r\nexport type AppThunkDispatch = ThunkDispatch<AppStoreType, null, RootActionsType>;\r\nexport const useAppDispatch: () => AppThunkDispatch = useDispatch;\r\nconst rootReducer = combineReducers({\r\n    ProfilePage: profileReducer,\r\n    DialogPage: dialogsReducer,\r\n    SideBar: sidebarReducer,\r\n    UsersPage: userReducer,\r\n    Auth: authReducer,\r\n    App: appReducer\r\n})\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\nexport type AppStoreType = ReturnType<typeof rootReducer>;\r\nexport const useAppSelector: TypedUseSelectorHook<AppStoreType> = useSelector;\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent} from \"react\";\r\nimport style from \"./users.module.scss\";\r\nimport userPhoto from \"../../Images/defaultUserImage.jpg\";\r\nimport {UserType} from \"../../Redux/UsersReducer\";\r\nimport Pagination from '@mui/material/Pagination';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\n\r\ntype usersPropsType = {\r\n    totalUserCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: UserType[]\r\n    followingInProgress: Array<string>\r\n    followTC: (userID: string) => void\r\n    unfollowTC: (userID: string) => void\r\n}\r\n\r\nexport function Users({users, totalUserCount, currentPage, pageSize, onPageChanged, followingInProgress,\r\n                          unfollowTC, followTC}: usersPropsType) {\r\n    const navigate = useNavigate();\r\n    const pagesCount = Math.ceil(totalUserCount / pageSize);\r\n    const defaultUserPhoto: string = userPhoto;\r\n    const onPageHandler = (event: ChangeEvent<unknown>, page: number) => {\r\n        onPageChanged(page);\r\n    }\r\n\r\n\r\n    return <div className={style.usersWrapper}>\r\n        <Pagination color={\"primary\"}\r\n                    onChange={onPageHandler}\r\n                    size={\"small\"}\r\n                    variant={\"outlined\"}\r\n                    shape=\"rounded\"\r\n                    count={pagesCount}\r\n                    page={currentPage}\r\n                    data-testid=\"pagination\"\r\n        />\r\n        {users.map(user =>\r\n\r\n            <div key={user.id} data-testid=\"userArr\">\r\n                <div className={style.usersBlock}>\r\n                    <div className={style.avatarAndFollowButton}>\r\n                        <img onClick={() => navigate(`/profile/${user.id}`)}\r\n                             className={style.avatar} src={user.photos.small ? user.photos.small : defaultUserPhoto}\r\n                             alt={\"user\"}/>\r\n                        <span>\r\n                            {user.followed ?\r\n                                <Button disabled={followingInProgress\r\n                                    .some(id => id === user.id)}\r\n                                        onClick={() => {\r\n                                            //ниже вызывается thunk creator из пропсов, в userContainerFC unfollowTC оборачивается dispatch\r\n                                            unfollowTC(user.id)\r\n                                        }\r\n                                        }>Unfollow</Button>\r\n\r\n                                : <Button disabled={followingInProgress.some(id => id === user.id)}\r\n                                          onClick={\r\n                                              () => {\r\n                                                  //ниже вызывается thunk creator из пропсов, в userContainerFC unfollowTC оборачивается dispatch\r\n                                                  //thunk creator нужен для связи DAL и BLL минуя UI\r\n                                                  followTC(user.id)\r\n                                              }\r\n                                          }>Follow</Button>\r\n                            }\r\n                            </span>\r\n                    </div>\r\n                    <div className={style.nameAndStatus}>\r\n                        <h3 className={style.name}>\r\n                            <div>{user.name}</div>\r\n                        </h3>\r\n                        <div className={style.status}>{`Status:  ${user.status ?? \"no status\"}`}</div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>)}\r\n    </div>\r\n\r\n}\r\n\r\n","import React from \"react\"\r\nimport styles from \"./Preloader.module.scss\"\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nexport function Preloader (){\r\n    return (\r\n        <div className={styles.main}>\r\n            <div className={styles.progress}>\r\n                <CircularProgress size={50}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import {useDispatch} from \"react-redux\";\r\nimport {\r\n    follow, getUsersTC, onPageChangedTC, unfollow\r\n} from \"../../Redux/UsersReducer\";\r\nimport React, {FC, useEffect} from \"react\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../Common/Preloader/Preloader\";\r\nimport {\r\n    currentPageSelector, followingArrSelector,\r\n    isFetchingSelector,\r\n    pageSizeSelector,\r\n    totalUserCountSelector,\r\n    usersSelector\r\n} from \"../Common/Selectors/Selectors\";\r\nimport {useAppSelector} from \"../../Redux/store\";\r\n\r\n\r\n\r\nconst UserContainerFC: FC = React.memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n    const users = useAppSelector(usersSelector);\r\n    const isFetching = useAppSelector(isFetchingSelector);\r\n    const pageSize = useAppSelector(pageSizeSelector);\r\n    const currentPage = useAppSelector(currentPageSelector);\r\n    const totalUserCount = useAppSelector(totalUserCountSelector);\r\n    const followingArr = useAppSelector(followingArrSelector);\r\n    // let Redirect= WithAuthRedirect(Users);\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersTC(currentPage, pageSize));\r\n    }, [currentPage, pageSize, dispatch])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(onPageChangedTC(pageSize, pageNumber));\r\n    }\r\n\r\n    const unfollowTC = (userID: string) => {\r\n        dispatch(unfollow(userID))\r\n    }\r\n\r\n    const followTC = (userID: string) => {\r\n        dispatch(follow(userID))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isFetching ?\r\n                    <Preloader/> :\r\n                    <Users onPageChanged={onPageChanged}\r\n                                            currentPage={currentPage}\r\n                                            totalUserCount={totalUserCount}\r\n                                            pageSize={pageSize}\r\n                                            users={users}\r\n                                            followTC={followTC}\r\n                                            unfollowTC={unfollowTC}\r\n                                            followingInProgress={followingArr}/>\r\n            }\r\n        </>\r\n    )\r\n})\r\nexport default UserContainerFC\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport styles from \"./Profile.module.scss\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateUserStatusTC} from \"../../Redux/ProfileReducer\";\r\nimport {statusSelector} from \"../Common/Selectors/Selectors\";\r\n\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useAppSelector} from \"../../Redux/store\";\r\nimport { myUserID} from \"../../constants\";\r\n\r\n\r\nexport const ProfileStatus = () => {\r\n    const dispatch = useDispatch();\r\n    const status = useAppSelector(statusSelector);\r\n    const userId = Number(useParams<'userId'>().userId)\r\n    const [localStatus, setLocalStatus] = useState(status);\r\n    const [editMode, setEditMode] = useState<boolean>(true);\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setLocalStatus(status);\r\n        setEditMode(false);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        dispatch(updateUserStatusTC(localStatus));\r\n        setEditMode(true);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value);\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            deactivateEditMode();\r\n        }\r\n    }\r\n\r\n    if ( userId !== myUserID ) {\r\n\r\n        return (\r\n            <div data-testid=\"editableDiv\">\r\n                {status}\r\n            </div>\r\n        )\r\n    }\r\n    if(editMode && userId === myUserID && !status){\r\n\r\n        return (\r\n        <div\r\n                className={styles.editableDiv}\r\n                onClick={activateEditMode}>\r\n                Set status\r\n        </div>\r\n        )\r\n    }\r\n\r\n    if((editMode && userId === myUserID) ){\r\n        return (\r\n        <div className={styles.editableDiv}\r\n             data-testid=\"editableMyDiv\"\r\n            onClick={activateEditMode}>\r\n            {status}\r\n        </div>)\r\n    }\r\n\r\n    else return <input className={styles.input}\r\n                       onChange={changeTitle}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       onBlur={deactivateEditMode}\r\n                       type=\"text\"\r\n                       data-testid=\"input\"\r\n                       value={localStatus}/>\r\n};\r\n\r\n","import React from 'react';\r\nimport s from \"./Contacts.module.scss\"\r\nexport type ContactsPropsType = {\r\n    contactTitle: string,\r\n    contactValue?: string | null\r\n}\r\n\r\nexport const Contact = ({contactTitle, contactValue}:ContactsPropsType) => {\r\n\r\n    return (\r\n        <>\r\n            <strong className={s.contact}>{contactTitle}:</strong> {contactValue}\r\n        </>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {useAppSelector} from \"../../../Redux/store\";\r\nimport {profileSelector} from \"../../Common/Selectors/Selectors\";\r\n\r\nimport {Contact} from \"./Contact\";\r\n\r\nexport const ProfileData = () => {\r\n    const profile = useAppSelector(profileSelector);\r\n\r\n    return (\r\n        <div>\r\n            <strong>Contacts: {Object.keys(profile.contacts).map(contactKey =>\r\n                    //@ts-ignore\r\n                <Contact contactTitle={contactKey} contactValue={profile.contacts[contactKey]} key={contactKey}/>)}</strong>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useRef, useState} from \"react\";\r\nimport styles from \"./ProfileInfo.module.scss\"\r\nimport {\r\n    ProfileDataType, uploadAvatarTC,\r\n} from \"../../../Redux/ProfileReducer\";\r\nimport defaultUserPhoto from \"../../../Images/defaultUserImage.jpg\";\r\nimport {ProfileStatus} from \"../ProfileStatus\";\r\nimport Modal from \"@mui/material/Modal/Modal\";\r\nimport {Box} from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {Close} from \"@mui/icons-material\";\r\nimport {useAppSelector} from \"../../../Redux/store\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppErrorAC} from \"../../../Redux/AppReducer\";\r\nimport {userIDSelector} from \"../../Common/Selectors/Selectors\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {maxPictureSize} from \"../../../constants\";\r\nimport {ProfileData} from \"../ProdileData/ProfileData\";\r\n\r\n\r\ntype profileInfoPropsType = {\r\n    profile: ProfileDataType\r\n\r\n}\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 350,\r\n    bgcolor: '#F9F9FE',\r\n    boxShadow: 24,\r\n    p: 4,\r\n    borderRadius: 2,\r\n}\r\nexport const ProfileInfo = React.memo((props: profileInfoPropsType) => {\r\n\r\n    const userPhoto = useAppSelector(state => state.ProfilePage.profile.photos?.large);\r\n    const userId = Number(useParams<'userId'>().userId)\r\n    const myId = useAppSelector(userIDSelector);\r\n    const photoRef = useRef<HTMLInputElement>(null);\r\n    const [open, setOpen] = useState(false);\r\n    const [base64Avatar, setLocalAvatar] = useState<any>(userPhoto);\r\n    const [fileAvatar, setFileAvatar] = useState<any>();\r\n    const dispatch = useDispatch();\r\n    const handleCloseModal = () => setOpen(false);\r\n    const handleSaveAvatar = () => {\r\n        dispatch(uploadAvatarTC(fileAvatar));\r\n        handleCloseModal();\r\n    }\r\n    const onChangeAvatar = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const reader = new FileReader();\r\n        const file = e.target?.files;\r\n\r\n        if ((file && file[0].type) && (file[0].type === \"image/png\" || file[0].type === \"image/jpeg\" )) {\r\n            setFileAvatar(file[0])\r\n            reader.onloadend = function () {\r\n                setLocalAvatar(reader.result)\r\n            }\r\n            if (file[0].size && file[0].size <= maxPictureSize) {\r\n                reader.readAsDataURL(file[0])\r\n            } else {\r\n                dispatch(setAppErrorAC(`Your file size must be less then ${maxPictureSize/1000000}MB 😕`))\r\n            }\r\n\r\n        } else {\r\n            dispatch(setAppErrorAC(`Your file has not in .png .jpeg format. Please choose the right file`))\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.descriptionBlock}>\r\n                <img className={styles.img} src={props.profile.photos?.large ?? defaultUserPhoto} alt={\"userPhoto\"}/>\r\n                {userId === myId && <div className={styles.menu} onClick={() => setOpen(true)}><p>Change your photo</p></div>}\r\n            </div>\r\n\r\n            <div className={styles.statusBlock}>\r\n                <div className={styles.profileName}>{props.profile.fullName}</div>\r\n                <div className={styles.profileStatus}>\r\n                    <ProfileStatus/>\r\n                </div>\r\n                <div className={styles.lookingForAJobDescription}>\r\n                    Looking for a job status: {props.profile.lookingForAJobDescription}\r\n                </div>\r\n                <div className={styles.contacts}>\r\n                    <ProfileData />\r\n                </div>\r\n            </div>\r\n            <Modal open={open}\r\n                   onClose={handleCloseModal}\r\n            >\r\n                <Box sx={style}>\r\n                    <Box>\r\n                        <Box style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            justifyContent: 'center',\r\n                            alignItems: \"center\", position: \"relative\"\r\n                        }}><strong>\r\n                            <p style={{fontSize: \"20px\"}}>Uploading profile photo</p>\r\n                        </strong></Box>\r\n                        <IconButton style={{position: \"absolute\", top: \"5px\", right: \"10px\"}}\r\n                                    onClick={handleCloseModal}>\r\n                            <Close/>\r\n                        </IconButton>\r\n                    </Box>\r\n                    <Box style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        justifyContent: 'center',\r\n                        alignItems: \"center\"\r\n                    }}>\r\n\r\n                        <Box id=\"outer-container\">\r\n                            <img src={base64Avatar || userPhoto} alt=\"avatar\"\r\n                                 width={\"200px\"} style={{borderRadius: \"8px\", marginBottom: \"10px\"}}\r\n                            />\r\n                        </Box>\r\n\r\n                        <Box>\r\n                            <label htmlFor=\"icon-button-file\">\r\n                                <input type={\"file\"} style={{display: \"none\"}} id={\"answer\"} ref={photoRef}\r\n                                       accept=\"image/*\" onChange={onChangeAvatar}/>\r\n                                <Button sx={{textTransform: \"none\"}} variant={\"contained\"}\r\n                                        onClick={() => photoRef.current && photoRef.current.click()}>Upload\r\n                                    photo</Button>\r\n                                <Button sx={{textTransform: \"none\"}} variant={\"contained\"}\r\n                                        onClick={handleSaveAvatar}>Save\r\n                                </Button>\r\n                            </label>\r\n                        </Box>\r\n                        <p>You can upload images in JPG or PNG format</p>\r\n                    </Box>\r\n                </Box>\r\n            </Modal>\r\n        </div>\r\n    );\r\n})","import React, {useEffect, useState} from \"react\";\r\nimport styles from \"./Post.module.scss\"\r\nimport {MyProfilePhoto} from \"../../../Common/MyProfilePhoto/MyProfilePhoto\";\r\n\r\ntype MyPostsPropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nexport function Post(props: MyPostsPropsType) {\r\n    const [likesCount, setLikesCount] = useState<number>();\r\n    const maxLikesCount = 1000;\r\n    const generateLike = () => {\r\n        setLikesCount(Math.round(Math.random() * maxLikesCount));\r\n    };\r\n    useEffect(() => {\r\n        generateLike()\r\n    }, []);\r\n\r\n    return (\r\n        <div className={styles.itemWrapper}>\r\n            <div className={styles.userAndLoginBlock}>\r\n                <MyProfilePhoto/>\r\n            </div>\r\n            <p>\r\n                {props.message}\r\n            </p>\r\n            <div>\r\n                <span>Like: </span>{props.likeCount !== 0 ? props.likeCount : likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {Post} from \"./MyPosts/Post/Post\";\r\nimport styles from \"./MyPosts.module.scss\"\r\nimport {PostType} from \"../OldComponents/OldStore\";\r\nimport { TextAreaForm } from \"../Common/TextAreaForm/TextAreaForm\";\r\n\r\nexport type MyPostsPropsType = {\r\n    postsData?: Array<PostType>\r\n    callBack: (text: string) => void\r\n    placeholderText: string\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    let postsElements = props.postsData?.map(p => <Post key={p.id}\r\n                                                        message={p.message}\r\n                                                        likeCount={p.likesCount}/>).reverse()\r\n    return <div className={styles.postBlock}>\r\n        <h3>My posts</h3>\r\n        <TextAreaForm placeholderText={props.placeholderText} callBack={props.callBack}/>\r\n        <div className={styles.posts}>\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n\r\n})\r\n\r\n","import React from \"react\";\r\nimport styles from \"./Profile.module.scss\"\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {addPostActionAC} from \"../../Redux/ProfileReducer\";\r\nimport commonStyle from \"../Common/boxStyle.module.scss\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {MyPosts} from \"./MyPosts\";\r\n\r\nimport {placeholderText} from \"../Common/TextAreaForm/textAreaData\";\r\nimport {postsDataSelector, profileSelector} from \"../Common/Selectors/Selectors\";\r\nimport {useAppSelector} from \"../../Redux/store\";\r\nimport {myUserID} from \"../../constants\";\r\n\r\ntype ProfilePropsType = {\r\n    userID: number| null\r\n}\r\n\r\nexport const ProfileFC = React.memo((props: ProfilePropsType) => {\r\n    const postsData = useAppSelector(postsDataSelector);\r\n    const profile = useAppSelector(profileSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    const addMessage = (text: string) =>{\r\n        return  dispatch(addPostActionAC(text));\r\n    }\r\n    return (\r\n        <div className={`${styles.wrapper} ${commonStyle.mainBox}`}>\r\n            <ProfileInfo profile={profile}/>\r\n            {props.userID === myUserID && <MyPosts placeholderText={placeholderText.profileAreaText}\r\n                                                   callBack={addMessage}\r\n                                                   postsData={postsData}/>}\r\n        </div>)\r\n\r\n})","import React, {FC, useEffect} from \"react\";\r\n\r\n\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {ProfileFC} from \"./ProfileFC\";\r\nimport {isLoggedInSelector} from \"../Common/Selectors/Selectors\";\r\nimport {useAppSelector} from \"../../Redux/store\";\r\nimport {PATH} from \"../../App\";\r\nimport {myUserID} from \"../../constants\";\r\nimport {getProfileTC, getUserStatusTC} from \"../../Redux/ProfileReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\nexport const ProfileContainerFC: FC = React.memo(() =>{\r\n    const dispatch = useDispatch();\r\n\r\n    const userId = Number(useParams<'userId'>().userId);//эта id взялась из компоненты app из роута <Route path={\"/profile/:userId\"}\r\n    const isLoggedIn = useAppSelector(isLoggedInSelector)\r\n    useEffect(() => {\r\n\r\n        if (userId !== myUserID){\r\n\r\n            dispatch(getProfileTC(userId));\r\n            dispatch(getUserStatusTC(userId));\r\n        }else{\r\n            dispatch(getProfileTC(myUserID));\r\n            dispatch(getUserStatusTC(myUserID));\r\n        }\r\n\r\n    }, [userId, dispatch]);\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={PATH.LOGIN}/>\r\n    }\r\n    return <ProfileFC userID={userId}/>\r\n})\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\n\r\n\r\nexport function Events(){\r\n    return(\r\n        <div >\r\n            <div>Events</div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport {Events} from \"./Events\";\r\n\r\nexport function EventsContainer(){\r\n   /* const Redirect = WithAuthRedirect(Events);*/\r\n    return(\r\n        <div>\r\n            {/*<Redirect/>*/}\r\n            <Events/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nconst Photos = () => {\r\n    return (\r\n        <div>\r\n            Photos\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Photos;","import React from 'react';\r\nimport styles from \"./Photos.module.scss\";\r\n\r\nimport Photos from \"./Photos\";\r\n\r\n\r\nfunction PhotosContainer() {\r\n    /*const Redirect = WithAuthRedirect(Photos)*/\r\n    return(\r\n        <div className={styles.content}>\r\n            {/*<Redirect/>*/}\r\n            <Photos/>\r\n        </div>\r\n    );\r\n}\r\n/*compose<React.ComponentType>(WithAuthRedirect)(PhotosContainer);*/\r\nexport default PhotosContainer","import React, {useState} from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, } from \"react-redux\";\r\nimport {loginTC} from \"../../Redux/AuthReducer\";\r\nimport {useAppSelector} from \"../../Redux/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {NullableType, setAppErrorAC} from \"../../Redux/AppReducer\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport {PATH} from \"../../App\";\r\nimport {Visibility, VisibilityOff} from \"@mui/icons-material\";\r\nimport {InputAdornment} from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Input from \"@mui/material/Input\";\r\n\r\ntype FormikErrorType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\nexport const Login = React.memo(() => {\r\n    const isLoggedIn = useAppSelector<boolean>(state => state.Auth.isLoggedIn);\r\n    const serverError = useAppSelector<NullableType<string>>(state => state.App.error);\r\n    const captchaUrl = useAppSelector<NullableType<string>>(state => state.Auth.captchaUrl)\r\n    const dispatch = useDispatch();\r\n    const [isPassType, setIsPassType] = useState<boolean>(true);\r\n\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            const errors: Partial<FormikErrorType> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (values.password.length < 3) {\r\n                errors.password = \"Invalid password length\"\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password required\"\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: true,\r\n            captcha: \"\"\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        }\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Navigate to={PATH.HOME}/>\r\n    }\r\n\r\n    const removeError = () => {\r\n        serverError && dispatch(setAppErrorAC(\"\"));\r\n    }\r\n    const handleClickShowPassword = () => {\r\n        setIsPassType(!isPassType);\r\n    };\r\n    const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n\r\n        <Grid container justifyContent={\"center\"}>\r\n            <Grid item justifyContent={'center'}>\r\n                <h1>Login</h1>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               rel=\"noreferrer\" target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormGroup>\r\n                            <FormControl  sx={{mTop: 2, width: '35ch'}} variant=\"standard\">\r\n                                <InputLabel htmlFor=\"standard-adornment-email\">Email</InputLabel>\r\n                                <Input {...formik.getFieldProps(\"email\")} onFocus={removeError}\r\n                                />\r\n                            </FormControl>\r\n                            {/*<TextField label=\"Email\"\r\n                                       placeholder={\"email\"}\r\n                                       type=\"email\"\r\n                                       margin=\"normal\"\r\n                                       {...formik.getFieldProps(\"email\")} onFocus={removeError}/>*/}\r\n\r\n                            {formik.touched.email && formik.errors.email ?\r\n                                <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n\r\n                            <FormControl sx={{mTop: 2, width: '35ch'}} variant=\"standard\">\r\n                                <InputLabel htmlFor=\"standard-adornment-password\">Password</InputLabel>\r\n                                <Input {...formik.getFieldProps(\"password\")}\r\n                                       id=\"standard-adornment-password\"\r\n                                       type={isPassType ? 'password' : 'text'}\r\n                                       endAdornment={\r\n                                           <InputAdornment position=\"end\">\r\n                                               <IconButton\r\n                                                   aria-label=\"toggle password visibility\"\r\n                                                   onClick={handleClickShowPassword}\r\n                                                   onMouseDown={handleMouseDownPassword}\r\n                                               >\r\n                                                   {isPassType ? <VisibilityOff/> : <Visibility/>}\r\n                                               </IconButton>\r\n                                           </InputAdornment>\r\n                                       }\r\n\r\n                                />\r\n                                {formik.touched.password && formik.errors.password ?\r\n                                    <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n                            </FormControl>\r\n                            {/*<TextField type={\"password\"}\r\n                                       label=\"Password\"\r\n                                       margin=\"normal\"\r\n                                       placeholder={\"Password\"}\r\n                                       {...formik.getFieldProps(\"password\")}\r\n                                       onFocus={removeError}/>\r\n\r\n                            {formik.touched.password && formik.errors.password ?\r\n                                <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}*/}\r\n\r\n\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox/>}\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.getFieldProps(\"rememberMe\").value}\r\n                            />\r\n\r\n                            {captchaUrl &&\r\n                            <>\r\n                                <img src={captchaUrl} alt={\"captchaImg\"}/>\r\n                                <FormControl sx={{mTop: 2, width: '35ch'}} variant=\"standard\">\r\n                                    <InputLabel htmlFor=\"standard-adornment-password\">Captcha</InputLabel>\r\n                                    <Input {...formik.getFieldProps(\"captcha\")}\r\n\r\n                                    />\r\n                                    {formik.touched.captcha && formik.errors.captcha ?\r\n                                        <div style={{color: \"red\"}}>{formik.errors.captcha}</div> : null}\r\n                                </FormControl>\r\n                            </>\r\n                            }\r\n\r\n                            <Button style={{marginTop:\" 1rem\"}} variant={'contained'}\r\n                                    type={\"submit\"}>\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n});\r\n\r\n","import React, {ReactElement} from 'react';\r\nimport {Preloader} from \"../Common/Preloader/Preloader\";\r\n\r\n\r\nfunction withSuspense<T>(Component: React.ComponentType<T>) {\r\n\r\n    return (props:T):ReactElement => (\r\n        <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n    )\r\n}\r\nexport default withSuspense\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\n\r\nimport Alert from \"@mui/material/Alert\";\r\nimport {AlertTitle} from \"@mui/material\";\r\nimport {useAppDispatch, useAppSelector} from \"../../Redux/store\";\r\nimport {NullableType, setAppErrorAC} from \"../../Redux/AppReducer\";\r\n\r\n\r\n\r\nexport const ErrorSnackBar = () => {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const error = useAppSelector<NullableType<string>>(state => state.App.error);\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose} anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}>\r\n            <Alert\r\n                onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                <AlertTitle>Error</AlertTitle>\r\n                <strong>{error}</strong>\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n};\r\n","import React, {useEffect} from 'react';\r\nimport s from \"./EditProfile.module.scss\"\r\nimport {useAppSelector} from \"../../Redux/store\";\r\nimport {profileSelector} from \"../Common/Selectors/Selectors\";\r\nimport {TextField} from \"@mui/material\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {Formik} from \"formik\";\r\nimport {getProfileTC, updateProfileTC} from \"../../Redux/ProfileReducer\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport {useDispatch} from 'react-redux';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {PATH} from \"../../App\";\r\n\r\n\r\n\r\nexport const EditProfile = React.memo(() => {\r\n    const userId = useAppSelector(state => state.Auth.data.id);\r\n    const profile = useAppSelector(profileSelector);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        dispatch(getProfileTC(userId));\r\n    }, [userId, dispatch]);\r\n\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.content}><h3>Edit profile</h3>\r\n                <p>Contacts: </p>\r\n                <Formik enableReinitialize={true}\r\n                        initialValues={{\r\n                            userId: userId,\r\n                            lookingForAJob: profile.lookingForAJob,\r\n                            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n                            fullName: profile.fullName,\r\n                            aboutMe: profile.aboutMe,\r\n                            contacts: {\r\n                                facebook: profile.contacts.facebook,\r\n                                website: profile.contacts.website,\r\n                                vk: profile.contacts.vk,\r\n                                twitter: profile.contacts.twitter,\r\n                                instagram: profile.contacts.instagram,\r\n                                youtube: profile.contacts.youtube,\r\n                                github: profile.contacts.github,\r\n                                mainLink: profile.contacts.mainLink,\r\n                            }\r\n\r\n                        }}\r\n\r\n                        onSubmit={\r\n                            values => {\r\n                                dispatch(updateProfileTC(values));\r\n                                navigate(`${PATH.PROFILE}/${userId}`);\r\n                            }\r\n                        }>\r\n\r\n                    {props => (\r\n                        <form onSubmit={props.handleSubmit}>\r\n                            <div className={s.formRow}>\r\n                                <p className={s.contactText}>Github: </p>\r\n                                <TextField style={{background: \"#FFFFFF\", width: \"260px\"}}\r\n                                           size={\"small\"}\r\n                                           type=\"text\"\r\n                                           name={\"contacts.github\"}\r\n                                           onChange={props.handleChange}\r\n                                           onBlur={props.handleBlur}\r\n                                           value={props.values.contacts.github}\r\n                                           error={!!props.errors.contacts?.github}\r\n                                           helperText={props.errors.contacts?.github}\r\n                                />\r\n                            </div>\r\n                            <div className={s.formRow}>\r\n                                <p className={s.contactText}>Facebook: </p>\r\n                                <TextField style={{background: \"#FFFFFF\", width: \"260px\"}}\r\n                                           size={\"small\"}\r\n                                           type=\"text\"\r\n                                           name={\"contacts.facebook\"}\r\n                                           onChange={props.handleChange}\r\n                                           onBlur={props.handleBlur}\r\n                                           value={props.values.contacts.facebook}\r\n\r\n                                />\r\n                            </div>\r\n                            <div className={s.formRow}>\r\n                                <p className={s.contactText}>VK: </p>\r\n                                <TextField style={{background: \"#FFFFFF\", width: \"260px\"}}\r\n                                           size={\"small\"}\r\n                                           type=\"text\"\r\n                                           name={\"contacts.vk\"}\r\n                                           onChange={props.handleChange}\r\n                                           onBlur={props.handleBlur}\r\n                                           value={props.values.contacts.vk}\r\n\r\n                                />\r\n                            </div>\r\n                            <div className={s.formRow}>\r\n                                <p className={s.contactText}>Instagram: </p>\r\n                                <TextField style={{background: \"#FFFFFF\", width: \"260px\"}}\r\n                                           size={\"small\"}\r\n                                           type=\"text\"\r\n                                           name={\"contacts.instagram\"}\r\n                                           onChange={props.handleChange}\r\n                                           onBlur={props.handleBlur}\r\n                                           value={props.values.contacts.instagram}\r\n\r\n\r\n                                />\r\n                            </div>\r\n                            <div className={s.formRow}>\r\n                                <p className={s.contactText}>Twitter: </p>\r\n                                <TextField style={{background: \"#FFFFFF\", width: \"260px\"}}\r\n                                           size={\"small\"}\r\n                                           type=\"text\"\r\n                                           name={\"contacts.twitter\"}\r\n                                           onChange={props.handleChange}\r\n                                           onBlur={props.handleBlur}\r\n                                           value={props.values.contacts.twitter}\r\n\r\n                                />\r\n                            </div>\r\n                            <div className={s.formRow}>\r\n                                <p className={s.contactText}>YouTube: </p>\r\n                                <TextField style={{background: \"#FFFFFF\", width: \"260px\"}}\r\n                                           size={\"small\"}\r\n                                           type=\"text\"\r\n                                           name={\"contacts.youtube\"}\r\n                                           onChange={props.handleChange}\r\n                                           onBlur={props.handleBlur}\r\n\r\n                                />\r\n                            </div>\r\n                            <div className={s.formRow}>\r\n                                <p className={s.contactText}>Your WebSite: </p>\r\n                                <TextField style={{background: \"#FFFFFF\", width: \"260px\"}}\r\n                                           size={\"small\"}\r\n                                           type=\"text\"\r\n                                           name={\"contacts.website\"}\r\n                                           onChange={props.handleChange}\r\n                                           onBlur={props.handleBlur}\r\n\r\n                                />\r\n                            </div>\r\n                            <div className={s.formRow}>\r\n                                <p className={s.contactText}>Main link: </p>\r\n                                <TextField style={{background: \"#FFFFFF\", width: \"260px\"}}\r\n                                           size={\"small\"}\r\n                                           type=\"text\"\r\n                                           name={\"contacts.mainLink\"}\r\n                                           onChange={props.handleChange}\r\n                                           onBlur={props.handleBlur}\r\n\r\n                                />\r\n                            </div>\r\n                            <div className={s.formRow}>\r\n                                <p className={s.contactText}>About me: </p>\r\n                                <TextField style={{background: \"#FFFFFF\", width: \"260px\"}}\r\n                                           multiline={true}\r\n                                           size={\"small\"}\r\n                                           type=\"text\"\r\n                                           name={\"aboutMe\"}\r\n                                           onChange={props.handleChange}\r\n                                           onBlur={props.handleBlur}\r\n                                           value={props.values.aboutMe}\r\n\r\n                                />\r\n\r\n                            </div>\r\n                            <div className={s.formRow}>\r\n                                <p className={s.contactText}>Full name: </p>\r\n                                <TextField style={{background: \"#FFFFFF\", width: \"260px\"}}\r\n                                           size={\"small\"}\r\n                                           type=\"text\"\r\n                                           name={\"fullName\"}\r\n                                           onChange={props.handleChange}\r\n                                           onBlur={props.handleBlur}\r\n                                           value={props.values.fullName}\r\n\r\n                                />\r\n                            </div>\r\n                            <div style={{display: \"flex\", justifyContent: \"center\"}}>\r\n\r\n                                <FormControlLabel\r\n                                    labelPlacement={\"start\"}\r\n                                    className={s.contactText}\r\n                                    label={'Looking for a job:'}\r\n                                    name={\"lookingForAJob\"}\r\n                                    control={<Checkbox/>}\r\n                                    checked={props.values.lookingForAJob}\r\n                                    onChange={props.handleChange}\r\n                                />\r\n                            </div>\r\n                            <div className={s.formRow}>\r\n                                <p className={s.contactText}>Job description: </p>\r\n                                <TextField style={{background: \"#FFFFFF\", width: \"260px\"}}\r\n                                           multiline={true}\r\n                                           size={\"small\"}\r\n                                           name={\"lookingForAJobDescription\"}\r\n                                           type=\"text\"\r\n                                           onChange={props.handleChange}\r\n                                           onBlur={props.handleBlur}\r\n                                           value={props.values.lookingForAJobDescription}\r\n                                />\r\n                            </div>\r\n\r\n\r\n                            <div className={s.button}>\r\n                                <Button variant={'contained'} type={\"submit\"}>Submit\r\n                                    changes</Button>\r\n                            </div>\r\n                        </form>\r\n                    )}\r\n\r\n                </Formik>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import React, {FC, useEffect} from 'react';\r\nimport './App.scss';\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {SideBar} from \"./components/Navbar/SideBar\";\r\nimport {Route, Routes, Navigate} from \"react-router-dom\";\r\nimport {store, useAppSelector} from \"./Redux/store\";\r\nimport UsersContainerFC from './components/Users/UsersContainerFC';\r\nimport {ProfileContainerFC} from \"./components/Profile/ProfileContainerFC\";\r\nimport {EventsContainer} from \"./components/Events/EventsContainer\";\r\nimport PhotosContainer from \"./components/Photos/PhotosContainer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {initializeAppTC} from \"./Redux/AuthReducer\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {Preloader} from \"./components/Common/Preloader/Preloader\";\r\nimport {isInitializedSelector, isLoggedInSelector} from \"./components/Common/Selectors/Selectors\";\r\nimport withSuspense from \"./components/HOC/withSuspense\";\r\nimport {RequestStatusType} from \"./Redux/AppReducer\";\r\nimport {ErrorSnackBar} from \"./components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {EditProfile} from \"./components/EditProfile/EditProfile\";\r\n\r\n\r\n\r\nconst DialogContainerFC = React.lazy(() => import(\"./components/Dialogs/DialogContainerFC\"));\r\n\r\nexport const PATH = {\r\n    HOME: \"/\",\r\n    LOGIN: \"/login\",\r\n    PROFILE: \"/profile\",\r\n    USERS: \"/users\",\r\n    ERROR404: \"/404\",\r\n    ANY_ROUTE: \"*\",\r\n    DIALOGS: \"/dialogs\",\r\n    EVENTS: \"/events\",\r\n    PHOTOS: \"/photos\",\r\n    EDIT_PROFILE: \"/edit_profile\"\r\n}\r\n\r\n\r\nconst App: FC = () => {\r\n\r\n    const appStatus = useAppSelector<RequestStatusType>(state => state.App.status);\r\n    const state = store.getState();\r\n    const dispatch = useDispatch();\r\n    const userID = useAppSelector(state => state.Auth.data.id)\r\n    const isLoggedIn = useAppSelector(isLoggedInSelector);\r\n    const isInitialized = useAppSelector(isInitializedSelector);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC());\r\n    }, [dispatch]);\r\n\r\n    if (!isInitialized) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={\"App\"}>\r\n            <Header/>\r\n            <main className={\"mainContent\"}>\r\n\r\n                {isLoggedIn && <SideBar SideBar={state.SideBar}/>}\r\n                {appStatus === 'loading' && <Preloader/>}\r\n                <Routes>\r\n                    <Route path={PATH.HOME} element={<Navigate to={`${PATH.PROFILE}/${userID}`}/>}/>\r\n                    <Route path={PATH.LOGIN} element={<Login/>}/>\r\n                    <Route path={`${PATH.PROFILE}/:userId`} element={<ProfileContainerFC/>}/>\r\n                    <Route path={PATH.DIALOGS} element={withSuspense(DialogContainerFC)({})}/>\r\n                    <Route path={PATH.EVENTS} element={<EventsContainer/>}/>\r\n                    <Route path={PATH.PHOTOS} element={<PhotosContainer/>}/>\r\n                    <Route path={PATH.USERS} element={<UsersContainerFC/>}/>\r\n                    <Route path={PATH.EDIT_PROFILE} element={<EditProfile/>}/>\r\n                    <Route path={PATH.ANY_ROUTE} element={<Navigate to={PATH.ERROR404}/>}/>\r\n                    <Route path={PATH.ERROR404} element={<div>Error 404</div>}/>\r\n                </Routes>\r\n                <ErrorSnackBar/>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import './index.scss';\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./App\";\nimport {store} from \"./Redux/store\";\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\n\n// @ts-ignore\nwindow.store = store\n\n    ReactDOM.render(\n            <Provider store={store}>\n                <HashRouter>\n                    <App/>\n                </HashRouter>\n            </Provider>,\n        document.getElementById('root')\n    );\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileInfo_wrapper__1slqq\",\"statusBlock\":\"ProfileInfo_statusBlock__12kNH\",\"profileName\":\"ProfileInfo_profileName__QENTj\",\"profileStatus\":\"ProfileInfo_profileStatus__P1vsw\",\"contacts\":\"ProfileInfo_contacts__yTcQt\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__252WB\",\"menu\":\"ProfileInfo_menu__4TXbA\",\"modalMainBox\":\"ProfileInfo_modalMainBox__3RTcD\",\"avatarBlock\":\"ProfileInfo_avatarBlock__3CI4t\",\"avatarImg\":\"ProfileInfo_avatarImg__3-stZ\",\"iconUpload\":\"ProfileInfo_iconUpload__aSS_N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideWrapper\":\"Navbar_sideWrapper__1dV1_\",\"NavItem\":\"Navbar_NavItem__3u4wb\",\"active\":\"Navbar_active__2IssC\",\"ChatBlock\":\"Navbar_ChatBlock__1-WE4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersWrapper\":\"users_usersWrapper__2NhZI\",\"usersBlock\":\"users_usersBlock__30vL-\",\"avatarAndFollowButton\":\"users_avatarAndFollowButton__3flk2\",\"avatar\":\"users_avatar__3IP3J\",\"nameAndStatus\":\"users_nameAndStatus__nYsqe\",\"status\":\"users_status__2gbbh\",\"name\":\"users_name__3sX1D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatBlock\":\"ChatBlock_ChatBlock__5ewrq\",\"Title\":\"ChatBlock_Title__YfUmN\",\"imgProfilePhoto\":\"ChatBlock_imgProfilePhoto__dibQ_\",\"OnlineDot\":\"ChatBlock_OnlineDot__2krZz\",\"onlineFriendsWrapper\":\"ChatBlock_onlineFriendsWrapper__14FnN\"};","export default __webpack_public_path__ + \"static/media/defaultUserImage.ed37b80a.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"Header_headerWrapper__2JC-5\",\"headerContent\":\"Header_headerContent__1KPAQ\",\"loginBlock\":\"Header_loginBlock__1rezt\",\"login\":\"Header_login__2_qsa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__3dKt0\",\"editableDiv\":\"Profile_editableDiv__GFY9u\",\"input\":\"Profile_input__1jMdf\"};","export const placeholderText = {\r\n    profileAreaText: \"What's new with you?\",\r\n    dialogsAreaText: \"Type a message\"\r\n}\r\nexport const maxMessageLength:number = 500;","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../Redux/store\";\r\nimport styles from \"./MyProfilePhoto.module.scss\";\r\nimport defaultUserPhoto from \"../../../Images/defaultUserImage.jpg\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {userIDSelector} from \"../Selectors/Selectors\";\r\n\r\nexport const MyProfilePhoto = React.memo(() =>{\r\n    const navigate = useNavigate()\r\n    const myPhoto = useSelector<AppRootStateType, string | undefined>(state => state.ProfilePage.profile.photos?.small);\r\n    const myLoginName = useSelector<AppRootStateType, string | null>(state => state.Auth.data.login);\r\n    const userID = useSelector(userIDSelector)\r\n    const navigateToMyMage = ()=>{\r\n        navigate(`/profile/${userID}`)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.myProfilePhotoWrapper}>\r\n            <img className={styles.mySmallPhoto} src={myPhoto || defaultUserPhoto} alt={\"userPhoto\"}/>\r\n            <div className={styles.userName} onClick={navigateToMyMage}>\r\n                {myLoginName}\r\n            </div>\r\n        </div>\r\n    )\r\n})"],"sourceRoot":""}