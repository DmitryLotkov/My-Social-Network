{"version":3,"sources":["Redux/AuthReducer.tsx","components/api.tsx","Images/defaultUserImage.jpg","components/Common/MyProfilePhoto/MyProfilePhoto.tsx","components/Header/TopContainer.tsx","components/Header/Header.tsx","components/Navbar/ChatBlock.tsx","components/Navbar/Navbar.tsx","Redux/ProfileReducer.tsx","Redux/DialogsReducer.tsx","Redux/NavBarReducer.tsx","Redux/UsersReducer.tsx","Redux/reduxStore.ts","components/Users/Users.tsx","components/Common/Preloader/Preloader.tsx","components/Users/UsersContainerFC.tsx","components/Profile/ProfileStatus.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Common/TextAreaForm/textAreaData.ts","components/Common/TextAreaForm/TextAreaForm.tsx","components/Profile/MyPosts.tsx","components/Profile/ProfileFC.tsx","components/Profile/ProfileContainerFC.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogContainerFC.tsx","components/Events/Events.tsx","components/Events/EventsContainer.tsx","components/Photos/Photos.tsx","components/Photos/PhotosContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.scss","components/Navbar/Navbar.module.scss","components/Users/users.module.scss","components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.scss","components/Navbar/ChatBlock.module.scss","components/Header/Header.module.scss","components/Profile/Profile.module.scss","components/Common/MyProfilePhoto/MyProfilePhoto.module.scss","components/Profile/MyPosts/Post/Post.module.scss","components/Profile/MyPosts.module.scss","components/Common/TextAreaForm/TextAreaForm.module.scss","components/Common/Preloader/Preloader.module.scss","components/Common/boxStyle.module.scss"],"names":["ACTIONS_TYPE","instance","axios","create","withCredentials","baseURL","headers","userAPI","currentPage","pageSize","get","profileAPI","userID","status","put","authAPI","post","delete","data","initialState","id","email","login","isInitialized","isLoggedIn","setIsLoggedInAC","type","AUTH_SET_IS_LOGGED_IN","setInitializedAC","AUTH_SET_IS_INITIALIZED","setAuthProfileAC","profileData","AUTH_SET_PROFILE_DATA","MyProfilePhoto","React","memo","myPhoto","useSelector","state","ProfilePage","photo","Auth","className","styles","myProfilePhotoWrapper","mySmallPhoto","src","defaultUserPhoto","alt","userName","TopContainer","navigate","useNavigate","dispatch","useDispatch","headerContent","loginBlock","onClick","then","res","resultCode","catch","error","console","log","message","Header","headerWrapper","ChatBlock","props","chatStyles","onlineFriendsWrapper","imgProfilePhoto","avatar","OnlineDot","NavBar","onlineFriends","SideBar","map","f","to","style","navWrapper","NavItem","color","isActive","Title","setUserProfileAC","profile","SET_SOME_USER_PROFILE","setStatusAC","SET_STATUS","postsData","v1","likesCount","fullName","lookingForAJob","lookingForAJobDescription","userId","aboutMe","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","photos","small","large","profileReducer","action","ADD_POST","dialogs","name","messages","dialogsReducer","text","sidebarReducer","followSuccess","unFollowSuccess","setUsersAC","users","setCurrentPageAC","setUsersTotalCountAC","serverTotalUsersCount","totalCount","toggleIsFetchingAC","isFetching","toggleFollowingProgressAC","followingIsProgress","items","following","rootReducer","combineReducers","DialogPage","UsersPage","u","followed","filter","store","createStore","applyMiddleware","thunk","window","Users","pagesCount","Math","ceil","totalUserCount","userPhoto","usersWrapper","Pagination","onChange","event","page","onPageChanged","size","variant","shape","count","usersBlock","avatarAndFollowButton","disabled","followingInProgress","some","unfollowTC","followTC","nameAndStatus","Preloader","preloaderContainer","CircularProgress","UserContainerFC","followingArr","useEffect","response","getUsersTC","pageNumber","onPageChangedCTC","follow","unfollow","ProfileStatus","useState","editMode","setEditMode","localStatus","setLocalStatus","activateEditMode","deactivateEditMode","updateUserStatusTC","editableDiv","input","e","currentTarget","value","onKeyPress","key","onBlur","autoFocus","ProfileInfo","wrapper","descriptionBlock","statusBlock","profileName","profileStatus","Post","setLikesCount","round","random","itemWrapper","userAndLoginBlock","likeCount","placeholderText","TextAreaForm","formik","useFormik","initialValues","validate","values","errors","length","onSubmit","resetForm","callBack","handleSubmit","formWrapper","textArea","maxLength","placeholder","getFieldProps","undefined","MyPosts","postsElements","p","postBlock","posts","ProfileFC","commonStyle","mainBox","ProfileContainerFC","params","useParams","Number","getProfileThunkCreator","getUserStatusTC","DialogItem","dialogItem","m","userAvatarAndName","Message","messagesWrapper","Dialogs","messagesElements","addMessage","useCallback","addMessageAC","dialogsWrapper","DialogContainerFC","dialogPage","Events","EventsContainer","Photos","PhotosContainer","content","Login","test","password","rememberMe","href","touched","checked","App","getState","finally","path","element","UsersContainerFC","position","top","textAlign","width","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2228652c.chunk.js","sourcesContent":["import {Dispatch} from \"redux\";\r\nimport {authAPI, AuthDataType} from \"../components/api\";\r\n\r\n\r\n\r\nexport const myUserID = 21748;\r\n\r\n//types\r\nexport enum ACTIONS_TYPE {\r\n    AUTH_SET_IS_LOGGED_IN = \"SET-IS-LOGGED-IN\",\r\n    AUTH_SET_IS_INITIALIZED = \"SET-IS-INITIALIZED\",\r\n    AUTH_SET_PROFILE_DATA = \"SET-PROFILE-DATA\",\r\n}\r\n\r\n\r\n/*type ThunkType = ThunkAction<void, AppRootStateType, unknown, AuthActionsType>*/\r\n\r\nexport type AuthActionsType =\r\n    ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setInitializedAC>\r\n    | ReturnType<typeof setAuthProfileAC>\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\ntype InitialStateType = {\r\n    data: AuthDataType,\r\n    isInitialized: boolean\r\n    isLoggedIn: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    data: {\r\n        id: 0,\r\n        email: \"\",\r\n        login: \"\"\r\n    },\r\n    isInitialized: false,\r\n    isLoggedIn: false\r\n\r\n}\r\n//thunks\r\nexport const initializeAppTC = () => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.me()\r\n            .then((response) => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(true));\r\n                    dispatch(setAuthProfileAC(response.data.data));\r\n                }\r\n            })\r\n            .catch((error: Error) => {\r\n                console.log(error.message)\r\n            })\r\n            .finally(() =>{\r\n                dispatch(setInitializedAC(true));\r\n            })\r\n    }\r\n}\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n\r\n    authAPI.login(data)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(true));\r\n                }\r\n            }\r\n        )\r\n        .catch((error: Error) => {\r\n            console.log(error.message)\r\n        })\r\n}\r\nexport const logOutTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.logout()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(false));\r\n                }\r\n            })\r\n            .catch((error: Error) => {\r\n                console.log(error.message);\r\n            })\r\n\r\n    }\r\n}\r\n//reducer\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case ACTIONS_TYPE.AUTH_SET_IS_LOGGED_IN:\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        case ACTIONS_TYPE.AUTH_SET_IS_INITIALIZED:\r\n            return {...state, isInitialized: action.isInitialized}\r\n        case ACTIONS_TYPE.AUTH_SET_PROFILE_DATA:\r\n            return {...state, data: action.data}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action creators\r\nexport const setIsLoggedInAC = (isLoggedIn: boolean) =>\r\n    ({type: ACTIONS_TYPE.AUTH_SET_IS_LOGGED_IN, isLoggedIn} as const);\r\n\r\nexport const setInitializedAC = (isInitialized: boolean) =>\r\n    ({type: ACTIONS_TYPE.AUTH_SET_IS_INITIALIZED, isInitialized} as const);\r\n\r\nexport const setAuthProfileAC = (profileData: AuthDataType) =>\r\n    ({type: ACTIONS_TYPE.AUTH_SET_PROFILE_DATA, data: profileData} as const);\r\n\r\n\r\n\r\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {UsersType} from \"../Redux/UsersReducer\";\r\nimport {ProfileDataType} from \"../Redux/ProfileReducer\";\r\nimport {LoginParamsType} from \"../Redux/AuthReducer\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"3ca3376c-f1c7-42b6-b439-a7f59c674e78\",\r\n    }\r\n})\r\nexport type AuthDataType = {\r\n    id:number,\r\n    email: string\r\n    login:string\r\n}\r\ntype RespType<T = {}> = {\r\n    resultCode: 0\r\n    data: T\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n}\r\nexport const userAPI = {\r\n\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<UsersType>(`users?page=${currentPage}&count=${pageSize}`);\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userID: number | null) {\r\n        return instance.get<ProfileDataType>(`profile/${userID}`);\r\n    },\r\n    getStatus(userID: number | null) {\r\n\r\n        return instance.get<AxiosResponse<string>, any>(`profile/status/${userID}`);\r\n    },\r\n    updateStatus(status: string | null) {\r\n        return instance.put<AxiosResponse<RespType>,any>(`profile/status`, {status: status})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<RespType<AuthDataType>>(`auth/me`);\r\n    },\r\n    follow(userID: string | undefined) {\r\n        return instance.post<RespType<AuthDataType>>(`follow/${userID}`);\r\n    },\r\n    unfollow(userID: string | undefined) {\r\n        return instance.delete<RespType<AuthDataType>>(`follow/${userID}`);\r\n    },\r\n    login(data: LoginParamsType){\r\n        return instance.post<RespType<AuthDataType>>(`auth/login`, data);\r\n    },\r\n    logout(){\r\n        return instance.delete<RespType>('/auth/login');\r\n    }\r\n\r\n}\r\n","export default __webpack_public_path__ + \"static/media/defaultUserImage.ed37b80a.jpg\";","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../Redux/reduxStore\";\r\nimport styles from \"./MyProfilePhoto.module.scss\";\r\nimport defaultUserPhoto from \"../../../Images/defaultUserImage.jpg\";\r\n\r\nexport const MyProfilePhoto = React.memo(() =>{\r\n    const myPhoto = useSelector<AppRootStateType, string | undefined>(state => state.ProfilePage.photo);\r\n    const login = useSelector<AppRootStateType, string | null>(state => state.Auth.data.login);\r\n\r\n    return (\r\n        <div className={styles.myProfilePhotoWrapper}>\r\n            <img className={styles.mySmallPhoto} src={myPhoto || defaultUserPhoto} alt={\"userPhoto\"}/>\r\n            <div className={styles.userName}>\r\n                {login}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport styles from \"./Header.module.scss\"\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/reduxStore\";\r\nimport {logOutTC} from \"../../Redux/AuthReducer\";\r\nimport {MyProfilePhoto} from \"../Common/MyProfilePhoto/MyProfilePhoto\";\r\n\r\n\r\nexport function TopContainer() {\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.Auth.isLoggedIn);\r\n\r\n    const logOutHandler = () =>{\r\n        dispatch(logOutTC());\r\n        navigate(\"/login\")\r\n    }\r\n\r\n    return (\r\n        <div className={styles.headerContent}>\r\n            <img src={\"https://templates.envytheme.com/zust/default/assets/images/logo.png\"} alt=\"logo\"/>\r\n                <div className={styles.loginBlock}>\r\n                    {isLoggedIn &&<MyProfilePhoto/>}\r\n                    {isLoggedIn && <div className={styles.login} onClick={logOutHandler}>\r\n                        Log out\r\n                    </div>}\r\n                </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport styles from \"./Header.module.scss\"\r\nimport {TopContainer} from \"./TopContainer\";\r\n\r\n\r\n\r\nexport function Header(){\r\n    return(\r\n            <header className={styles.headerWrapper}>\r\n                <TopContainer/>\r\n            </header>\r\n\r\n    )\r\n}","import {OnlineFriendType} from \"../OldComponents/OldStore\";\r\nimport React from \"react\";\r\nimport chatStyles from \"./ChatBlock.module.scss\"\r\n\r\nexport function ChatBlock(props: OnlineFriendType) {\r\n\r\n    return (\r\n            <div className={chatStyles.onlineFriendsWrapper}>\r\n                <img className={chatStyles.imgProfilePhoto} src={props.avatar} alt={\"onlineFriendAvatar\"}/>\r\n                <span className={chatStyles.OnlineDot}/>\r\n            </div>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport style from \"./Navbar.module.scss\"\r\nimport chatStyles from \"./ChatBlock.module.scss\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {SideBarType} from \"../OldComponents/OldStore\";\r\nimport {ChatBlock} from \"./ChatBlock\";\r\n\r\ntype NavBarPropsType = {\r\n    SideBar: SideBarType,\r\n}\r\n\r\nexport function NavBar(props: NavBarPropsType) {\r\n\r\n    let onlineFriends = props.SideBar.onlineFriends.map((f) =>\r\n        <NavLink key={f.id} to={\"/friends\" + f.id}>\r\n            <ChatBlock\r\n                       id={f.id}\r\n                       avatar={f.avatar}/>\r\n        </NavLink>)\r\n    return (\r\n        <nav className={style.navWrapper}>\r\n            <div className={style.NavItem}>\r\n                <NavLink  to={\"/profile\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })} >Profile</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/dialogs\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Messages</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/events\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Events</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/photos\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Photos</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/users\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Find Friends</NavLink>\r\n            </div>\r\n            <div className={style.NavItem}>\r\n                <NavLink to={\"/settings\"} style={({ isActive }) => ({ color: isActive ? \"goldenrod\" : 'black' })}>Settings</NavLink>\r\n            </div>\r\n\r\n            <div className={chatStyles.ChatBlock}>\r\n                <span className={chatStyles.Title}>Chat online</span>\r\n                {onlineFriends}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n","import {v1} from \"uuid\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI} from \"../components/api\";\r\nimport {ActionsTypes} from \"./ActionsTypes\";\r\nimport {myUserID} from \"./AuthReducer\";\r\n\r\n\r\nexport enum ACTIONS_TYPE {\r\n    SET_PROFILE = \"SET-PROFILE\",\r\n    ADD_POST = \"ADD-POST\",\r\n    SET_MY_PROFILE_PHOTO = \"SET-MY-PROFILE_PHOTO\",\r\n    UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\",\r\n    SET_SOME_USER_PROFILE = \"SET-SOME-USER-PROFILE\",\r\n    SET_STATUS = \"SET-STATUS\"\r\n}\r\nexport type PostTextType = {\r\n    text: string\r\n}\r\ntype ProfilePageType = {\r\n    postsData: Array<PostType>\r\n    profile: ProfileDataType\r\n    photo: string | undefined\r\n    status: string\r\n}\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type userProfileContactType = {\r\n    facebook: string | undefined\r\n    website: string | null\r\n    vk: string | undefined\r\n    twitter: string | undefined\r\n    instagram: string | undefined\r\n    youtube: string | undefined\r\n    github: string | null | undefined\r\n    mainLink: string | null\r\n}\r\nexport type userProfilePhotosType = {\r\n    small: string | undefined\r\n    large: string | undefined\r\n}\r\nexport type ProfileDataType = {\r\n    aboutMe: string | null\r\n    contacts: userProfileContactType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string | null\r\n    userId: number\r\n    photos: userProfilePhotosType\r\n\r\n}\r\nexport const getProfileThunkCreator = (userId: number | null) => {\r\n    return (dispatch: Dispatch) => {\r\n\r\n        profileAPI.getProfile(userId)\r\n            .then(response => {\r\n                dispatch(setUserProfileAC(response.data));\r\n            }).catch(() =>{\r\n            console.log(\"Error in getProfile\")\r\n        })\r\n    }\r\n}\r\nexport const getUserStatusTC = (userId: number | null) => {\r\n    return  (dispatch: Dispatch) => {\r\n\r\n        profileAPI.getStatus(userId)\r\n\r\n            .then(res =>{\r\n                if(res.status === 200){\r\n                    dispatch(setStatusAC(res.data));\r\n                }\r\n            }).catch(()=>{\r\n            console.log(\"Error in getStatus\")\r\n        });\r\n\r\n    }\r\n}\r\n\r\nexport const updateUserStatusTC = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n\r\n        profileAPI.updateStatus(status)\r\n            .then(res => {\r\n                if(res.data.resultCode === 0){\r\n                    dispatch(setStatusAC(status))\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const addPostActionAC = (data: string) => {\r\n    return {\r\n        type: ACTIONS_TYPE.ADD_POST,\r\n        data\r\n    } as const\r\n}\r\nexport const updateNewPostTextAC = (text: PostTextType) => {\r\n\r\n    return {\r\n        type: ACTIONS_TYPE.UPDATE_NEW_POST_TEXT,\r\n        text\r\n    } as const\r\n}\r\nexport const setUserProfileAC = (profile: ProfileDataType) => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_SOME_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\nexport const setMyProfilePhotoAC = (photo: string | undefined) => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_MY_PROFILE_PHOTO,\r\n        photo\r\n    } as const\r\n}\r\nexport const setStatusAC = (status: string) => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_STATUS,\r\n        status\r\n    } as const\r\n\r\n}\r\nconst initialState: ProfilePageType = {\r\n\r\n    postsData: [\r\n        {id: v1(), message: \"Do you have a job for me? What if I find it?\", likesCount: 0},\r\n        {id: v1(), message: \"I want to be a serious frontend developer.\", likesCount: 0},\r\n        {id: v1(), message: \"What is the good weather today,isn't it?\", likesCount: 0},\r\n    ],\r\n    status: \"\",\r\n    photo: \"\",\r\n    profile: {\r\n        fullName: \"\",\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: \"\",\r\n        userId: myUserID,\r\n        aboutMe: \"\",\r\n        contacts: {\r\n            facebook: \"\",\r\n            github: \"\",\r\n            instagram: \"\",\r\n            mainLink: \"\",\r\n            twitter: \"\",\r\n            vk: \"\",\r\n            website: \"\",\r\n            youtube: \"\",\r\n        },\r\n        photos:\r\n            {\r\n                small: \"\",\r\n                large: \"\",\r\n            }\r\n    }\r\n}\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.ADD_POST: {\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, {id: v1(), message: action.data, likesCount: 0}]\r\n            };\r\n        }\r\n        case \"SET-SOME-USER-PROFILE\": {\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        }\r\n        case \"SET-MY-PROFILE_PHOTO\": {\r\n            return {\r\n                ...state, photo: action.photo\r\n            }\r\n        }\r\n        case \"SET-STATUS\": {\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default profileReducer","import {v1} from \"uuid\";\r\nimport {ActionsTypes} from \"./ActionsTypes\";\r\n\r\nexport const addMessageAC = (text: string) => {\r\n    return {\r\n        type: \"ADD-DIALOG-MESSAGE\",\r\n        text\r\n    } as const\r\n}\r\n\r\nexport type MessagesType = {\r\n    id: string\r\n    message: string\r\n}\r\nexport type DialogsType = {\r\n    id: string\r\n    name: string\r\n    avatar: string\r\n    message: string\r\n}\r\nexport type DialogsStateType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\nlet initialState: DialogsStateType = {\r\n\r\n    dialogs: [\r\n        {\r\n            id: v1(),\r\n            name: \"Boris Jonson\",\r\n            avatar: \"https://themified.com/friend-finder/images/users/user-4.jpg\",\r\n            message: \"What is the weather forecast for tomorrow?\"\r\n        },\r\n\r\n    ],\r\n    messages: [\r\n        {id: v1(), message: \"Looks like it will be sunny tomorrow=)\"}\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsStateType = initialState, action: ActionsTypes): DialogsStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-DIALOG-MESSAGE\": {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: v1(), message: action.text}]\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\nexport default dialogsReducer;","import {SideBarType} from \"../components/OldComponents/OldStore\";\r\nimport {v1} from \"uuid\";\r\n\r\nlet initialState: SideBarType = {\r\n    onlineFriends: [\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-4.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-3.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-6.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-2.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-7.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-10.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-9.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-5.jpg\"},\r\n        {id: v1(), avatar: \"https://themified.com/friend-finder/images/users/user-8.jpg\"},\r\n    ],\r\n}\r\nconst sidebarReducer = (state: SideBarType = initialState) => {\r\n    return state\r\n}\r\nexport default sidebarReducer;","import {authAPI, userAPI} from \"../components/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionsTypes} from \"./ActionsTypes\";\r\n\r\n\r\nexport const getUsersTC = (currentPage: number, pageSize: number) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        userAPI.getUsers(currentPage, pageSize)\r\n            .then(response => {\r\n                dispatch(toggleIsFetchingAC(false));\r\n                dispatch(setUsersAC(response.data.items));\r\n                dispatch(setUsersTotalCountAC(response.data.totalCount));\r\n            });\r\n    }\r\n}\r\nexport const onPageChangedCTC = (pageSize: number, pageNumber: number) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        dispatch(setCurrentPageAC(pageNumber));\r\n        userAPI.getUsers(pageNumber, pageSize)\r\n            .then(response => {\r\n                    dispatch(setUsersAC(response.data.items));\r\n                    dispatch(setUsersTotalCountAC(response.data.totalCount));\r\n                    dispatch(toggleIsFetchingAC(false));\r\n                }\r\n            )\r\n    }\r\n\r\n}\r\n\r\nexport const follow = (userID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgressAC(true, userID));\r\n        authAPI.follow(userID)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followSuccess(userID));\r\n                }\r\n                dispatch(toggleFollowingProgressAC(false, userID));\r\n            })\r\n    }\r\n}\r\n\r\nexport const unfollow = (userID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgressAC(true, userID));\r\n        authAPI.unfollow(userID)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n\r\n                    dispatch(unFollowSuccess(userID));\r\n                }\r\n                dispatch(toggleFollowingProgressAC(false, userID));\r\n            })\r\n    }\r\n}\r\nexport type LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type UserType = {\r\n    id: string,\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n    followed: boolean\r\n    photos: PhotosType\r\n\r\n}\r\nexport type UsersType = {\r\n    items: UserType[]\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    following: Array<string>\r\n}\r\n\r\nexport const followSuccess = (userID: string) => {\r\n    return {\r\n        type: \"FOLLOW\",\r\n        userID: userID,\r\n    } as const\r\n}\r\nexport const unFollowSuccess = (userID: string) => {\r\n    return {\r\n        type: \"UNFOLLOW\",\r\n        userID: userID,\r\n    } as const\r\n}\r\nexport const setUsersAC = (users: UserType[]) => {\r\n    return {\r\n        type: \"SET-USERS\",\r\n        users: users,\r\n    } as const\r\n}\r\nexport const setCurrentPageAC = (currentPage: number) => {\r\n    return {\r\n        type: \"SET-CURRENT-PAGE\",\r\n        currentPage: currentPage,\r\n    } as const\r\n}\r\nexport const setUsersTotalCountAC = (serverTotalUsersCount: number) => {\r\n    return {\r\n        type: \"SET-TOTAL-USERS-COUNT\",\r\n        totalCount: serverTotalUsersCount\r\n    } as const\r\n}\r\nexport const toggleIsFetchingAC = (isFetching: boolean) => {\r\n    return {\r\n        type: \"IS-FETCHING\",\r\n        isFetching: isFetching,\r\n    } as const\r\n}\r\n\r\nexport const toggleFollowingProgressAC = (followingIsProgress: boolean, userID: string) => {\r\n    return {\r\n        type: \"IS-FOLLOWING-PROGRESS\",\r\n        followingIsProgress: followingIsProgress,\r\n        userID: userID,\r\n    } as const\r\n}\r\n\r\nlet initialState: UsersType = {\r\n    items: [],\r\n    pageSize: 7,\r\n    totalCount: 1,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    following: [],\r\n}\r\nexport const userReducer = (state = initialState, action: ActionsTypes): UsersType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\": {\r\n            return {...state, items: state.items.map(u => u.id === action.userID ? {...u, followed: true} : u)}\r\n        }\r\n\r\n        case \"UNFOLLOW\": {\r\n            return {...state, items: state.items.map(u => u.id === action.userID ? {...u, followed: false} : u)}\r\n        }\r\n\r\n        case \"SET-USERS\": {\r\n            return {...state, items: action.users}\r\n        }\r\n\r\n        case \"SET-CURRENT-PAGE\": {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n\r\n        case \"SET-TOTAL-USERS-COUNT\": {\r\n            return {...state, totalCount: action.totalCount}\r\n        }\r\n\r\n        case \"IS-FETCHING\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        case \"IS-FOLLOWING-PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                following: action.followingIsProgress\r\n                    ? [...state.following, action.userID]\r\n                    : state.following.filter(id => id !== action.userID)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./ProfileReducer\";\r\nimport dialogsReducer from \"./DialogsReducer\";\r\nimport sidebarReducer from \"./NavBarReducer\";\r\nimport {userReducer} from \"./UsersReducer\";\r\nimport {authReducer} from \"./AuthReducer\";\r\nimport thunk from 'redux-thunk'\r\n\r\n\r\n\r\nexport type AppRootStateType = ReturnType <typeof rootReducer>\r\nconst rootReducer = combineReducers({\r\n    ProfilePage: profileReducer,\r\n    DialogPage: dialogsReducer,\r\n    SideBar: sidebarReducer,\r\n    UsersPage: userReducer,\r\n    Auth: authReducer,\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent} from \"react\";\r\nimport style from \"./users.module.scss\";\r\nimport userPhoto from \"../../Images/defaultUserImage.jpg\";\r\nimport {UserType} from \"../../Redux/UsersReducer\";\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\n\r\ntype UsersPresentationComponentType = {\r\n    totalUserCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: UserType[]\r\n    followingInProgress: Array<string>\r\n    followTC: (userID: string) => void\r\n    unfollowTC: (userID: string) => void\r\n}\r\n\r\nexport function Users(props: UsersPresentationComponentType) {\r\n\r\n    const pagesCount = Math.ceil(props.totalUserCount / props.pageSize);\r\n    const defaultUserPhoto: string = userPhoto;\r\n    const onPageHandler = (event: ChangeEvent<unknown>, page: number) => {\r\n        props.onPageChanged(page);\r\n    }\r\n    const navigate = useNavigate();\r\n\r\n    return <div className={style.usersWrapper}>\r\n        <Pagination color={\"primary\"}\r\n                    onChange={onPageHandler}\r\n                    size={\"small\"}\r\n                    variant={\"outlined\"}\r\n                    shape=\"rounded\"\r\n                    count={pagesCount}\r\n                    page={props.currentPage}\r\n        />\r\n        {props.users.map(u =>\r\n\r\n            <div key={u.id}>\r\n                <div className={style.usersBlock}>\r\n                    <div className={style.avatarAndFollowButton}>\r\n                        <img onClick={() => navigate(`/profile/${u.id}`)}\r\n                             className={style.avatar} src={u.photos.small ? u.photos.small : defaultUserPhoto}\r\n                             alt={\"user\"}/>\r\n                        <span>\r\n                            {u.followed ?\r\n                                <button disabled={props.followingInProgress\r\n                                    .some(id => id === u.id)}\r\n                                        onClick={() => {\r\n                                            //ниже вызывается thunk creator из пропсов, в userContainerFC unfollowTC оборачивается dispatch\r\n                                            props.unfollowTC(u.id)\r\n                                        }\r\n                                        }>Unfollow</button>\r\n\r\n                                : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                          onClick={\r\n                                              () => {\r\n                                                  //ниже вызывается thunk creator из пропсов, в userContainerFC unfollowTC оборачивается dispatch\r\n                                                  //thunk creator нужен для связи DAL и BLL минуя UI\r\n                                                  props.followTC(u.id)\r\n                                              }\r\n                                          }>Follow</button>\r\n                            }\r\n                            </span>\r\n                    </div>\r\n                    <div className={style.nameAndStatus}>\r\n                        <h3 className={style.name}>\r\n                            <div>{u.name}</div>\r\n                        </h3>\r\n                        <div className={style.status}>{`Status:  ${u.status ?? \"no status\"}`}</div>\r\n\r\n                        {/*<div className={style.location}>\r\n                            <div className={style.country}>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </div>*/}\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>)}\r\n    </div>\r\n\r\n}\r\n\r\n","import React from \"react\"\r\nimport styles from \"./Preloader.module.scss\"\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\nexport function Preloader (){\r\n    return (\r\n        <div className={styles.preloaderContainer}>\r\n            <CircularProgress />\r\n        </div>)\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/reduxStore\";\r\nimport {\r\n    follow, getUsersTC, onPageChangedCTC,\r\n    UserType, unfollow\r\n} from \"../../Redux/UsersReducer\";\r\nimport React, {FC, useEffect} from \"react\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../Common/Preloader/Preloader\";\r\n\r\n\r\n\r\nconst UserContainerFC: FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const users = useSelector<AppRootStateType, UserType[]>((state) => state.UsersPage.items);\r\n    const isFetching = useSelector<AppRootStateType, boolean>(state => state.UsersPage.isFetching);\r\n    const pageSize = useSelector<AppRootStateType, number>(state => state.UsersPage.pageSize);\r\n    const currentPage = useSelector<AppRootStateType, number>(state => state.UsersPage.currentPage);\r\n    const totalUserCount = useSelector<AppRootStateType, number>(state => state.UsersPage.totalCount);\r\n    const followingArr = useSelector<AppRootStateType, Array<string>>(state => state.UsersPage.following);\r\n    // let Redirect= WithAuthRedirect(Users);\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersTC(currentPage, pageSize));\r\n    }, [currentPage, pageSize, dispatch])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(onPageChangedCTC(pageSize, pageNumber));\r\n    }\r\n    const unfollowTC = (userID: string) => {\r\n\r\n        dispatch(unfollow(userID))\r\n    }\r\n    const followTC = (userID: string) => {\r\n\r\n        dispatch(follow(userID))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isFetching ?\r\n                    <Preloader/> :\r\n                    <Users onPageChanged={onPageChanged}\r\n                                            currentPage={currentPage}\r\n                                            totalUserCount={totalUserCount}\r\n                                            pageSize={pageSize}\r\n                                            users={users}\r\n                                            followTC={followTC}\r\n                                            unfollowTC={unfollowTC}\r\n                                            followingInProgress={followingArr}/>\r\n            }\r\n        </>\r\n    )\r\n}\r\nexport default UserContainerFC\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport styles from \"./Profile.module.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/reduxStore\";\r\nimport {updateUserStatusTC} from \"../../Redux/ProfileReducer\";\r\n\r\n\r\nexport const ProfileStatus = React.memo(() => {\r\n    const dispatch = useDispatch();\r\n    const [editMode, setEditMode] = useState<boolean>(true);\r\n    const status = useSelector<AppRootStateType, string>(state => state.ProfilePage.status);\r\n    const userId = useSelector<AppRootStateType, number | null>(state => state.ProfilePage.profile.userId); //21748\r\n    const [localStatus, setLocalStatus] = useState(status);\r\n\r\n    const activateEditMode = () => {\r\n        setLocalStatus(status);\r\n        setEditMode(false);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        dispatch(updateUserStatusTC(localStatus));\r\n        setEditMode(true);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value);\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            deactivateEditMode();\r\n        }\r\n    }\r\n    if (editMode && userId !== 21748 ) {\r\n        return (\r\n            <div>\r\n                {status}\r\n            </div>\r\n        )\r\n    }\r\n    if(editMode && userId === 21748 && !status){\r\n\r\n        return <div className={styles.editableDiv}\r\n            onClick={activateEditMode}>\r\n            {\"Set status\"}\r\n        </div>\r\n    }\r\n    if(editMode && userId === 21748){\r\n        return <div className={styles.editableDiv}\r\n                    onClick={activateEditMode}>\r\n            {status}\r\n        </div>\r\n    }\r\n\r\n    else return <input className={styles.input}\r\n                       onChange={changeTitle}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       onBlur={deactivateEditMode}\r\n                       type=\"text\"\r\n                       autoFocus={true}\r\n                       value={localStatus}/>\r\n\r\n\r\n});\r\n\r\n","import React from \"react\";\r\nimport styles from \"./ProfileInfo.module.scss\"\r\nimport {\r\n    ProfileDataType,\r\n} from \"../../../../Redux/ProfileReducer\";\r\nimport defaultUserPhoto from \"./../../../../Images/defaultUserImage.jpg\";\r\nimport {ProfileStatus} from \"../../ProfileStatus\";\r\n\r\ntype profileInfoPropsType = {\r\n    profile: ProfileDataType\r\n\r\n}\r\n\r\nexport const ProfileInfo = React.memo((props: profileInfoPropsType)=> {\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.descriptionBlock}>\r\n                <img src={props.profile?.photos.large ?? defaultUserPhoto} alt={\"userPhoto\"}/>\r\n            </div>\r\n            <div className={styles.statusBlock}>\r\n                <div className={styles.profileName}>{props.profile.fullName}</div>\r\n                <div className={styles.profileStatus}>\r\n                    <ProfileStatus/>\r\n                </div>\r\n                <div className={styles.lookingForAJobDescription}>\r\n                    Looking for a job status: { props.profile.lookingForAJobDescription}\r\n                </div>\r\n                <div className={styles.contacts}>\r\n                    <span>contacts: </span>\r\n                    <div>facebook: {props.profile.contacts.facebook}</div>\r\n                    <div>instagram: {props.profile.contacts.instagram}</div>\r\n                    <div>YouTube: {props.profile.contacts.youtube}</div>\r\n                    <div>Vk: {props.profile.contacts.vk}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})","import React, {useEffect, useState} from \"react\";\r\nimport styles from \"./Post.module.scss\"\r\nimport {MyProfilePhoto} from \"../../../Common/MyProfilePhoto/MyProfilePhoto\";\r\n\r\ntype MyPostsPropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nexport function Post(props: MyPostsPropsType) {\r\n    const [likesCount, setLikesCount] = useState<number>();\r\n    const maxLikesCount = 1000;\r\n    const generateLike = () => {\r\n        setLikesCount(Math.round(Math.random() * maxLikesCount));\r\n    };\r\n    useEffect(() => {\r\n        generateLike()\r\n    }, []);\r\n\r\n    return (\r\n        <div className={styles.itemWrapper}>\r\n            <div className={styles.userAndLoginBlock}>\r\n                <MyProfilePhoto/>\r\n            </div>\r\n            <div>\r\n                {props.message}\r\n            </div>\r\n            <div>\r\n                <span>Like: </span>{props.likeCount !== 0 ? props.likeCount : likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}","export const placeholderText = {\r\n    profileAreaText: \"What's new with you?\",\r\n    dialogsAreaText: \"Type a message\"\r\n}\r\nexport const maxMessageLength:number = 500;","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport styles from \"./TextAreaForm.module.scss\";\r\nimport {MyPostsPropsType} from \"../../Profile/MyPosts\";\r\nimport {maxMessageLength} from \"./textAreaData\";\r\n\r\n\r\n\r\nexport const TextAreaForm = React.memo((props: MyPostsPropsType) => {\r\n    type FormikErrorType = {\r\n        text?: string\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            text: \"\",\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if(!values.text){\r\n                errors.text = \"Enter a message\"\r\n            }\r\n            if(values.text.length >= maxMessageLength){\r\n                errors.text = `Max length of message is ${maxMessageLength} symbols.`\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values, {resetForm}) => {\r\n            if (values.text !== \"\")\r\n                props.callBack(values.text)\r\n            resetForm();\r\n        },\r\n\r\n    })\r\n\r\n\r\n    return (\r\n        <form  onSubmit={formik.handleSubmit}>\r\n            <div className={styles.formWrapper}><textarea className={styles.textArea} maxLength={1000}\r\n                         placeholder={props.placeholderText}\r\n                         {...formik.getFieldProps(\"text\")}\r\n                         autoFocus={true} onBlur={() => formik.errors.text = undefined}\r\n            />\r\n                <div>\r\n                    <button type={\"submit\"}>Publish</button>\r\n                </div>\r\n            </div>\r\n            {formik.errors.text &&  <div style={{color: \"red\"}}> {formik.errors.text}</div>}\r\n        </form>\r\n    )\r\n\r\n})","import React from \"react\";\r\nimport {Post} from \"./MyPosts/Post/Post\";\r\nimport styles from \"./MyPosts.module.scss\"\r\nimport {PostType} from \"../OldComponents/OldStore\";\r\nimport { TextAreaForm } from \"../Common/TextAreaForm/TextAreaForm\";\r\n\r\nexport type MyPostsPropsType = {\r\n    postsData?: Array<PostType>\r\n    callBack: (text: string) => void\r\n    placeholderText: string\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    let postsElements = props.postsData?.map(p => <Post key={p.id}\r\n                                                        message={p.message}\r\n                                                        likeCount={p.likesCount}/>)\r\n    return <div className={styles.postBlock}>\r\n        <h3>My posts</h3>\r\n        <TextAreaForm placeholderText={props.placeholderText} callBack={props.callBack}/>\r\n        <div className={styles.posts}>\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n\r\n})\r\n\r\n","import React from \"react\";\r\nimport styles from \"./Profile.module.scss\"\r\nimport {ProfileInfo} from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport {addPostActionAC, PostType, ProfileDataType,} from \"../../Redux/ProfileReducer\";\r\nimport commonStyle from \"../Common/boxStyle.module.scss\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/reduxStore\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {myUserID} from \"../../Redux/AuthReducer\";\r\nimport {placeholderText} from \"../Common/TextAreaForm/textAreaData\";\r\n\r\ntype ProfilePropsType = {\r\n    userID: number| null\r\n}\r\n\r\nexport const ProfileFC = React.memo((props: ProfilePropsType) => {\r\n    const postsData = useSelector<AppRootStateType, Array<PostType>>(state => state.ProfilePage.postsData);\r\n    const profile = useSelector<AppRootStateType, ProfileDataType>(state => state.ProfilePage.profile);\r\n    const dispatch = useDispatch();\r\n\r\n    const addMessage = (text: string) =>{\r\n        return  dispatch(addPostActionAC(text))\r\n    }\r\n    return (\r\n        <div className={`${styles.wrapper} ${commonStyle.mainBox}`}>\r\n            <ProfileInfo profile={profile}/>\r\n            {props.userID === myUserID && <MyPosts placeholderText={placeholderText.profileAreaText}\r\n                                                   callBack={addMessage}\r\n                                                   postsData={postsData}/>}\r\n        </div>)\r\n\r\n})","import React, {FC, useEffect} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getProfileThunkCreator, getUserStatusTC} from \"../../Redux/ProfileReducer\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nimport {ProfileFC} from \"./ProfileFC\";\r\n\r\n\r\n\r\n\r\nexport const ProfileContainerFC: FC = React.memo(() => {\r\n\r\n    const params = useParams<'userId'>();\r\n    const userId = Number(params.userId); //эта id взялась из компоненты app из роута <Route path={\"/profile/:userId\"}\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getProfileThunkCreator(userId));\r\n        dispatch(getUserStatusTC(userId));\r\n    }, [userId, dispatch]);\r\n\r\n\r\n    return <ProfileFC userID={userId}/>\r\n\r\n\r\n})\r\n\r\n\r\n\r\n","import styles from \"../Dialogs.module.scss\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {DialogsStateType} from \"../../../Redux/DialogsReducer\";\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    DialogPage: DialogsStateType\r\n}\r\n\r\nexport function DialogItem(props: DialogItemPropsType) {\r\n\r\n    let dialogItem = props.DialogPage.dialogs.map(m =>\r\n        <div className={styles.dialogItem} key={m.id}>\r\n            <div className={styles.userAvatarAndName}>\r\n                <NavLink\r\n                    to={\"/friendDialog/\" + m.id}>\r\n                    <img src={m.avatar}\r\n                         alt={\"friendAvatar\"}/>\r\n                    {m.name}\r\n                </NavLink>\r\n            </div>\r\n            <div>{m.message}</div>\r\n        </div>\r\n    )\r\n    return (\r\n        <>\r\n            {dialogItem}\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport styles from \"../Dialogs.module.scss\"\r\nimport {MyProfilePhoto} from \"../../Common/MyProfilePhoto/MyProfilePhoto\";\r\n\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport function Message (props: MessageType) {\r\n\r\n    return (\r\n        <div className={styles.messagesWrapper}>\r\n            <div className={styles.dialogItem}>{props.message}</div>\r\n            <MyProfilePhoto/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React, {useCallback} from \"react\";\r\nimport styles from \"./Dialogs.module.scss\"\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {addMessageAC, DialogsStateType} from \"../../Redux/DialogsReducer\";\r\nimport {TextAreaForm} from \"../Common/TextAreaForm/TextAreaForm\";\r\nimport {placeholderText} from \"../Common/TextAreaForm/textAreaData\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype DialogsPropsType = {\r\n    DialogPage: DialogsStateType\r\n}\r\n\r\nexport const Dialogs = React.memo((props: DialogsPropsType)=> {\r\n    const dispatch = useDispatch();\r\n    const messagesElements = props.DialogPage.messages.map((m) => <Message key={m.id}\r\n                                                                           message={m.message}\r\n                                                                           id={m.id}/>)\r\n    const addMessage = useCallback((text: string) => {\r\n        dispatch(addMessageAC(text));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className={styles.dialogsWrapper}>\r\n                <DialogItem DialogPage={props.DialogPage}/>\r\n                {messagesElements}\r\n            <TextAreaForm callBack={addMessage}\r\n                          placeholderText={placeholderText.dialogsAreaText}/>\r\n        </div>\r\n\r\n\r\n    )\r\n})\r\n","import React, {FC} from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/reduxStore\";\r\nimport {Dialogs} from \"./Dialogs\";\r\n\r\nimport {DialogsStateType} from \"../../Redux/DialogsReducer\";\r\n\r\n\r\n\r\nconst DialogContainerFC: FC = () => {\r\n\r\n    const dialogPage = useSelector<AppRootStateType, DialogsStateType>(state => state.DialogPage);\r\n\r\n    // const Redirect = WithAuthRedirect(Dialogs);\r\n    return (\r\n            /*<Redirect DialogPage={dialogPage}/>*/\r\n        <Dialogs DialogPage={dialogPage}/>\r\n\r\n    );\r\n};\r\n/*compose<React.ComponentType>(\r\n    WithAuthRedirect\r\n)(DialogContainerFC);*/\r\nexport default DialogContainerFC","import React from 'react';\r\n\r\n\r\n\r\nexport function Events(){\r\n    return(\r\n        <div >\r\n            <div>Events</div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport {Events} from \"./Events\";\r\n\r\nexport function EventsContainer(){\r\n   /* const Redirect = WithAuthRedirect(Events);*/\r\n    return(\r\n        <div>\r\n            {/*<Redirect/>*/}\r\n            <Events/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nconst Photos = () => {\r\n    return (\r\n        <div>\r\n            Photos\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Photos;","import React from 'react';\r\nimport styles from \"./Photos.module.scss\";\r\n\r\nimport Photos from \"./Photos\";\r\n\r\n\r\nfunction PhotosContainer() {\r\n    /*const Redirect = WithAuthRedirect(Photos)*/\r\n    return(\r\n        <div className={styles.content}>\r\n            {/*<Redirect/>*/}\r\n            <Photos/>\r\n        </div>\r\n    );\r\n}\r\n/*compose<React.ComponentType>(WithAuthRedirect)(PhotosContainer);*/\r\nexport default PhotosContainer","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../Redux/AuthReducer\";\r\nimport {AppRootStateType} from \"../../Redux/reduxStore\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.Auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (values.password.length < 3) {\r\n                errors.password = \"Invalid password length\"\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password required\"\r\n            }\r\n            return errors;\r\n        },\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: true,\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        }\r\n    })\r\n    if(isLoggedIn){\r\n        return <Navigate to={\"/\"}/>\r\n    }\r\n    return (\r\n\r\n        <div>\r\n            <h1>Login</h1>\r\n            <div>\r\n                <p>\r\n                    To log in get registered <a href={\"https://social-network.samuraijs.com/signUp\"}>here</a>\r\n                </p>\r\n                <p>\r\n                    or use common test accounts credentials:\r\n                </p>\r\n                <p>\r\n                    Email: free@samuraijs.com\r\n                </p>\r\n                <p>\r\n                    Password: free\r\n                </p>\r\n            </div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <input placeholder={\"email\"}\r\n                           {...formik.getFieldProps(\"email\")}/>\r\n                </div>\r\n                {formik.touched.password &&formik.errors.email ? <div style={ {color:\"red\"}}>{formik.errors.email}</div> : null}\r\n                <div>\r\n                    <input type={\"password\"}\r\n                           placeholder={\"Password\"}\r\n                           {...formik.getFieldProps(\"password\")}/>\r\n                </div>\r\n                {formik.touched.password &&formik.errors.password ? <div style={ {color:\"red\"}}>{formik.errors.password}</div> : null}\r\n                <div>\r\n                    <label>\r\n                        <input type={\"checkbox\"}\r\n                               {...formik.getFieldProps(\"rememberMe\")}\r\n                               checked={formik.values.rememberMe}/>\r\n                               Remember me\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <button type={\"submit\"}>Login</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {FC, useEffect} from 'react';\r\nimport './App.scss';\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {NavBar} from \"./components/Navbar/Navbar\";\r\nimport {Route, Routes, Navigate} from \"react-router-dom\";\r\nimport {AppRootStateType, store} from \"./Redux/reduxStore\";\r\nimport UsersContainerFC from './components/Users/UsersContainerFC';\r\nimport {ProfileContainerFC} from \"./components/Profile/ProfileContainerFC\";\r\nimport DialogContainerFC from \"./components/Dialogs/DialogContainerFC\";\r\nimport {EventsContainer} from \"./components/Events/EventsContainer\";\r\nimport PhotosContainer from \"./components/Photos/PhotosContainer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initializeAppTC} from \"./Redux/AuthReducer\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\n\r\nconst App: FC = () => {\r\n\r\n    const state = store.getState();\r\n    const dispatch = useDispatch();\r\n    const userID = useSelector<AppRootStateType, number>(state => state.ProfilePage.profile.userId)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.Auth.isLoggedIn);\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.Auth.isInitialized);\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC());\r\n    }, [dispatch]);\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className={\"App\"}>\r\n            <Header/>\r\n            {isLoggedIn ? <div className={\"mainContent\"}>\r\n                <NavBar SideBar={state.SideBar}/>\r\n                 <Routes>\r\n                    <Route path={\"/\"} element={<Navigate to={`/profile/${userID}`}/>}/>\r\n                    <Route path={\"/login\"} element={<Login/>}/>\r\n                    <Route path={\"/profile/:userId\"} element={<ProfileContainerFC/>}/>\r\n                    <Route path={\"/profile\"} element={<Navigate to={`/profile/${userID}`}/>}/>\r\n                    <Route path={\"/dialogs\"} element={<DialogContainerFC/>}/>\r\n                    <Route path={\"/events\"} element={<EventsContainer/>}/>\r\n                    <Route path={\"/photos\"} element={<PhotosContainer/>}/>\r\n                    <Route path={\"/users\"} element={<UsersContainerFC/>}/>\r\n                    <Route path={\"/*\"} element={<div>404</div>}/>\r\n                </Routes>\r\n            </div> :<Login/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import './index.scss';\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./App\";\nimport {store} from \"./Redux/reduxStore\";\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\n\n// @ts-ignore\nwindow.store = store\n\n    ReactDOM.render(\n            <Provider store={store}>\n                <HashRouter>\n                    <App/>\n                </HashRouter>\n            </Provider>,\n        document.getElementById('root')\n    );\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"Dialogs_dialogsWrapper__3F0bp\",\"dialogItem\":\"Dialogs_dialogItem__2sb9K\",\"userAvatarAndName\":\"Dialogs_userAvatarAndName__3RqOE\",\"messagesWrapper\":\"Dialogs_messagesWrapper__3fn-w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navWrapper\":\"Navbar_navWrapper__HbHpr\",\"NavItem\":\"Navbar_NavItem__3u4wb\",\"active\":\"Navbar_active__2IssC\",\"ChatBlock\":\"Navbar_ChatBlock__1-WE4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersWrapper\":\"users_usersWrapper__2NhZI\",\"usersBlock\":\"users_usersBlock__30vL-\",\"avatarAndFollowButton\":\"users_avatarAndFollowButton__3flk2\",\"avatar\":\"users_avatar__3IP3J\",\"nameAndStatus\":\"users_nameAndStatus__nYsqe\",\"status\":\"users_status__2gbbh\",\"name\":\"users_name__3sX1D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileInfo_wrapper__2zQ9G\",\"statusBlock\":\"ProfileInfo_statusBlock__A6KlW\",\"profileName\":\"ProfileInfo_profileName__aXVcE\",\"profileStatus\":\"ProfileInfo_profileStatus__3sbu8\",\"contacts\":\"ProfileInfo_contacts__3rDuc\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__WC_wT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatBlock\":\"ChatBlock_ChatBlock__5ewrq\",\"Title\":\"ChatBlock_Title__YfUmN\",\"imgProfilePhoto\":\"ChatBlock_imgProfilePhoto__dibQ_\",\"OnlineDot\":\"ChatBlock_OnlineDot__2krZz\",\"onlineFriendsWrapper\":\"ChatBlock_onlineFriendsWrapper__14FnN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"Header_headerWrapper__2JC-5\",\"headerContent\":\"Header_headerContent__1KPAQ\",\"loginBlock\":\"Header_loginBlock__1rezt\",\"login\":\"Header_login__2_qsa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__3dKt0\",\"editableDiv\":\"Profile_editableDiv__GFY9u\",\"input\":\"Profile_input__1jMdf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myProfilePhotoWrapper\":\"MyProfilePhoto_myProfilePhotoWrapper__3ZNPd\",\"mySmallPhoto\":\"MyProfilePhoto_mySmallPhoto__v9qAS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemWrapper\":\"Post_itemWrapper__1z8ce\",\"userAndLoginBlock\":\"Post_userAndLoginBlock__2x_uT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__sox7b\",\"posts\":\"MyPosts_posts__2zln9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"TextAreaForm_formWrapper__2lVua\",\"textArea\":\"TextAreaForm_textArea__2ZXO2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderContainer\":\"Preloader_preloaderContainer__13SXq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBox\":\"boxStyle_mainBox__24wr7\"};"],"sourceRoot":""}